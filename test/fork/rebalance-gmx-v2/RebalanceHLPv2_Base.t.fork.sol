// SPDX-License-Identifier: BUSL-1.1
// This code is made available under the terms and conditions of the Business Source License 1.1 (BUSL-1.1).
// The act of publishing this code is driven by the aim to promote transparency and facilitate its utilization for educational purposes.

pragma solidity 0.8.18;

/// HMX
import { IRebalanceHLPService } from "@hmx/services/interfaces/IRebalanceHLPService.sol";
import { IRebalanceHLPv2Handler } from "@hmx/handlers/interfaces/IRebalanceHLPv2Handler.sol";
import { IRebalanceHLPv2Service } from "@hmx/services/interfaces/IRebalanceHLPv2Service.sol";
import { IConfigStorage } from "@hmx/storages/interfaces/IConfigStorage.sol";
import { IGmxV2Oracle } from "@hmx/interfaces/gmx-v2/IGmxV2Oracle.sol";
import { IWNative } from "@hmx/interfaces/IWNative.sol";

/// HMX Tests
import { ForkEnvWithActions } from "@hmx-test/fork/bases/ForkEnvWithActions.sol";
import { Cheats } from "@hmx-test/base/Cheats.sol";
import { Deployer } from "@hmx-test/libs/Deployer.sol";
import { String } from "@hmx-test/libs/String.sol";
import { MockArbSys } from "@hmx-test/mocks/MockArbSys.sol";
import { MockEcoPyth } from "@hmx-test/mocks/MockEcoPyth.sol";
import { MockGmxV2Oracle } from "@hmx-test/mocks/MockGmxV2Oracle.sol";
import { LimitTradeHelper } from "@hmx/helpers/LimitTradeHelper.sol";
import { MockSwapPricingUtils } from "@hmx-test/mocks/MockSwapPricingUtils.sol";

abstract contract RebalanceHLPv2Service_BaseForkTest is ForkEnvWithActions, Cheats {
  bytes32 internal constant GM_WBTCUSDC_ASSET_ID = "GM(WBTC-USDC)";
  bytes32 internal constant GM_ETHUSDC_ASSET_ID = "GM(ETH-USDC)";
  bytes32 internal constant USDC_NATIVE_ASSET_ID = "USDC(native)";

  struct GmMarketConfig {
    address marketAddress;
    address longToken;
    address shortToken;
  }
  mapping(bytes32 gmMarketAssetId => GmMarketConfig config) internal gmMarketConfigs;

  uint256 internal constant REBALANCE_HLPv2_MIN_EXECUTION_FEE = 0.001 ether;
  IRebalanceHLPv2Handler rebalanceHLPv2Handler;
  IRebalanceHLPv2Service rebalanceHLPv2Service;

  struct SnapshotUint256 {
    uint256 before;
    uint256 after1;
  }

  function setUp() public virtual {
    // Mock ArbSys
    MockArbSys arbSys = new MockArbSys();
    vm.etch(0x0000000000000000000000000000000000000064, address(arbSys).code);

    // Mock GmxV2Oracle
    MockGmxV2Oracle mockGmxV2Oracle = new MockGmxV2Oracle();
    vm.etch(gmxV2DepositHandler.oracle(), address(mockGmxV2Oracle).code);
    // MockSwapPricingUtils mockSwapPricingUtils = new MockSwapPricingUtils();
    // vm.etch(0x6bB5894e971EdDE873C89033f1FF77dE01A4049b, address(mockSwapPricingUtils).code);

    // Mock EcoPyth
    makeEcoPythMockable();

    rebalanceHLPv2Service = Deployer.deployRebalanceHLPv2Service(
      address(proxyAdmin),
      address(weth),
      address(vaultStorage),
      address(configStorage),
      address(gmxV2ExchangeRouter),
      gmxV2DepositVault,
      address(gmxV2DepositHandler),
      address(gmxV2WithdrawalVault),
      address(gmxV2WithdrawalHandler)
    );
    rebalanceHLPv2Handler = Deployer.deployRebalanceHLPv2Handler(
      address(proxyAdmin),
      address(rebalanceHLPv2Service),
      address(weth),
      REBALANCE_HLPv2_MIN_EXECUTION_FEE
    );
    rebalanceHLPv2Handler.setWhitelistExecutor(address(this), true);

    // Upgrade dependencies
    vm.startPrank(proxyAdmin.owner());
    Deployer.upgrade("VaultStorage", address(proxyAdmin), address(vaultStorage));
    Deployer.upgrade("ConfigStorage", address(proxyAdmin), address(configStorage));
    Deployer.upgrade("Calculator", address(proxyAdmin), address(calculator));
    Deployer.upgrade("RebalanceHLPHandler", address(proxyAdmin), address(rebalanceHLPHandler));
    Deployer.upgrade("RebalanceHLPService", address(proxyAdmin), address(rebalanceHLPService));
    Deployer.upgrade("PerpStorage", address(proxyAdmin), address(perpStorage));
    Deployer.upgrade("TradeService", address(proxyAdmin), address(tradeService));
    Deployer.upgrade("TradeHelper", address(proxyAdmin), address(tradeHelper));
    vm.stopPrank();

    // Setup
    vm.startPrank(configStorage.owner());
    vaultStorage.setServiceExecutors(address(rebalanceHLPv2Service), true);
    vaultStorage.setServiceExecutors(address(this), true); // For testing pullToken
    configStorage.setServiceExecutor(address(rebalanceHLPv2Service), address(address(rebalanceHLPv2Handler)), true);
    vm.stopPrank();

    // Adding USDC (native), GM(WBTC-USDC), and GM(ETH-USDC) as a liquidity
    vm.startPrank(multiSig);
    bytes32[] memory newAssetIds = new bytes32[](3);
    newAssetIds[0] = GM_WBTCUSDC_ASSET_ID;
    newAssetIds[1] = GM_ETHUSDC_ASSET_ID;
    newAssetIds[2] = USDC_NATIVE_ASSET_ID;
    ecoPyth2.insertAssetIds(newAssetIds);
    pythAdapter.setConfig(GM_WBTCUSDC_ASSET_ID, GM_WBTCUSDC_ASSET_ID, false);
    pythAdapter.setConfig(GM_ETHUSDC_ASSET_ID, GM_ETHUSDC_ASSET_ID, false);
    pythAdapter.setConfig(USDC_NATIVE_ASSET_ID, USDC_NATIVE_ASSET_ID, true);
    oracleMiddleware.setAssetPriceConfig(GM_WBTCUSDC_ASSET_ID, 0, 60 * 5, address(pythAdapter));
    oracleMiddleware.setAssetPriceConfig(GM_ETHUSDC_ASSET_ID, 0, 60 * 5, address(pythAdapter));
    oracleMiddleware.setAssetPriceConfig(USDC_NATIVE_ASSET_ID, 0, 60 * 5, address(pythAdapter));
    configStorage.setAssetConfig(
      GM_WBTCUSDC_ASSET_ID,
      IConfigStorage.AssetConfig({
        assetId: GM_WBTCUSDC_ASSET_ID,
        tokenAddress: address(gmBTCUSD),
        decimals: 18,
        isStableCoin: false
      })
    );
    configStorage.setAssetConfig(
      GM_ETHUSDC_ASSET_ID,
      IConfigStorage.AssetConfig({
        assetId: GM_ETHUSDC_ASSET_ID,
        tokenAddress: address(gmETHUSD),
        decimals: 18,
        isStableCoin: false
      })
    );
    configStorage.setAssetConfig(
      USDC_NATIVE_ASSET_ID,
      IConfigStorage.AssetConfig({
        assetId: USDC_NATIVE_ASSET_ID,
        tokenAddress: address(usdc),
        decimals: 6,
        isStableCoin: true
      })
    );
    IConfigStorage.CollateralTokenConfig[]
      memory newCollateralTokenConfigs = new IConfigStorage.CollateralTokenConfig[](3);
    newCollateralTokenConfigs[0] = IConfigStorage.CollateralTokenConfig({
      collateralFactorBPS: 0.8 * 100_00,
      accepted: true,
      settleStrategy: address(0)
    });
    newCollateralTokenConfigs[1] = IConfigStorage.CollateralTokenConfig({
      collateralFactorBPS: 0.8 * 100_00,
      accepted: true,
      settleStrategy: address(0)
    });
    newCollateralTokenConfigs[2] = IConfigStorage.CollateralTokenConfig({
      collateralFactorBPS: 1 * 100_00,
      accepted: true,
      settleStrategy: address(0)
    });
    configStorage.setCollateralTokenConfigs(newAssetIds, newCollateralTokenConfigs);
    address[] memory newAssetAddresses = new address[](3);
    newAssetAddresses[0] = address(gmBTCUSD);
    newAssetAddresses[1] = address(gmETHUSD);
    newAssetAddresses[2] = address(usdc);
    IConfigStorage.HLPTokenConfig[] memory newHlpTokenConfigs = new IConfigStorage.HLPTokenConfig[](3);
    newHlpTokenConfigs[0] = IConfigStorage.HLPTokenConfig({
      targetWeight: 0,
      bufferLiquidity: 0,
      maxWeightDiff: 1000 ether,
      accepted: false
    });
    newHlpTokenConfigs[1] = IConfigStorage.HLPTokenConfig({
      targetWeight: 0,
      bufferLiquidity: 0,
      maxWeightDiff: 1000 ether,
      accepted: false
    });
    newHlpTokenConfigs[2] = IConfigStorage.HLPTokenConfig({
      targetWeight: 0,
      bufferLiquidity: 0,
      maxWeightDiff: 1000 ether,
      accepted: false
    });
    address[] memory newHlpTokenAddresses = new address[](3);
    newHlpTokenAddresses[0] = address(gmBTCUSD);
    newHlpTokenAddresses[1] = address(gmETHUSD);
    newHlpTokenAddresses[2] = address(usdc);
    configStorage.addOrUpdateAcceptedToken(newHlpTokenAddresses, newHlpTokenConfigs);
    vm.stopPrank();

    // Set Dexter for USDC native
    vm.startPrank(deployer);
    uniswapDexter.setPathOf(
      address(usdc),
      address(usdc_e),
      abi.encodePacked(address(usdc), uint24(100), address(usdc_e))
    );
    uniswapDexter.setPathOf(
      address(usdc_e),
      address(usdc),
      abi.encodePacked(address(usdc_e), uint24(100), address(usdc))
    );
    switchCollateralRouter.setDexterOf(address(usdc), address(usdc_e), address(uniswapDexter));
    switchCollateralRouter.setDexterOf(address(usdc_e), address(usdc), address(uniswapDexter));
    vm.stopPrank();

    // Grant required roles
    vm.startPrank(gmxV2Timelock);
    gmxV2RoleStore.grantRole(address(this), keccak256(abi.encode("ORDER_KEEPER")));
    vm.stopPrank();

    // Setup GM(WBTC-USDC) config
    gmMarketConfigs[GM_WBTCUSDC_ASSET_ID] = GmMarketConfig({
      marketAddress: address(gmBTCUSD),
      longToken: address(wbtc),
      shortToken: address(usdc)
    });
    // Setup GM(ETH-USDC) config
    gmMarketConfigs[GM_ETHUSDC_ASSET_ID] = GmMarketConfig({
      marketAddress: address(gmETHUSD),
      longToken: address(weth),
      shortToken: address(usdc)
    });

    vm.label(address(rebalanceHLPv2Handler), "RebalanceHLPv2Handler");
    vm.label(address(rebalanceHLPv2Service), "RebalanceHLPv2Service");

    // Override prices
    MockEcoPyth(address(ecoPyth2)).overridePrice(GM_WBTCUSDC_ASSET_ID, 1.11967292 * 1e8);
    MockEcoPyth(address(ecoPyth2)).overridePrice(GM_ETHUSDC_ASSET_ID, 0.98014296 * 1e8);
    MockEcoPyth(address(ecoPyth2)).overridePrice(USDC_NATIVE_ASSET_ID, 1 * 1e8);

    uint256[] memory _marketIndexes = new uint256[](1);
    _marketIndexes[0] = 0;
    uint256[] memory _positionSizeLimits = new uint256[](1);
    _positionSizeLimits[0] = 2_000_000 * 1e30;
    uint256[] memory _tradeSizeLimits = new uint256[](1);
    _tradeSizeLimits[0] = 2_000_000 * 1e30;

    vm.prank(0x6409ba830719cd0fE27ccB3051DF1b399C90df4a);
    LimitTradeHelper(0x0E7C0d58f2e4a6b28597D51a34C4b7acDA1Ee719).setLimit(
      _marketIndexes,
      _positionSizeLimits,
      _tradeSizeLimits
    );
  }

  function rebalanceHLPv2_createDepositOrder(
    bytes32 market,
    uint256 longTokenAmount,
    uint256 shortTokenAmount,
    uint256 minMarketTokens,
    string memory errSignature
  ) internal returns (bytes32) {
    // Preps
    IRebalanceHLPv2Service.DepositParams memory depositParam = IRebalanceHLPv2Service.DepositParams({
      market: gmMarketConfigs[market].marketAddress,
      longToken: gmMarketConfigs[market].longToken,
      longTokenAmount: longTokenAmount,
      shortToken: gmMarketConfigs[market].shortToken,
      shortTokenAmount: shortTokenAmount,
      minMarketTokens: minMarketTokens,
      gasLimit: 1_000_000
    });
    IRebalanceHLPv2Service.DepositParams[] memory depositParams = new IRebalanceHLPv2Service.DepositParams[](1);
    depositParams[0] = depositParam;

    if (!String.isEmpty(errSignature)) {
      vm.expectRevert(abi.encodeWithSignature(errSignature));
    }
    bytes32[] memory gmxDepositOrderKeys = rebalanceHLPv2Handler.createDepositOrders{
      value: REBALANCE_HLPv2_MIN_EXECUTION_FEE
    }(depositParams, REBALANCE_HLPv2_MIN_EXECUTION_FEE);

    if (gmxDepositOrderKeys.length == 0) {
      return bytes32(0);
    }

    return gmxDepositOrderKeys[0];
  }

  function rebalanceHLPv2_createDepositOrder(
    bytes32 market,
    uint256 longTokenAmount,
    uint256 shortTokenAmount,
    uint256 minMarketTokens
  ) internal returns (bytes32) {
    return rebalanceHLPv2_createDepositOrder(market, longTokenAmount, shortTokenAmount, minMarketTokens, "");
  }

  function rebalanceHLPv2_createWithdrawalOrder(
    bytes32 market,
    uint256 gmTokenAmount,
    uint256 minLongTokens,
    uint256 minShortTokens,
    string memory errSignature
  ) internal returns (bytes32) {
    // Preps
    uint256 executionFee = 0.001 ether;
    IRebalanceHLPv2Service.WithdrawalParams memory withdrawalParam = IRebalanceHLPv2Service.WithdrawalParams({
      market: gmMarketConfigs[market].marketAddress,
      amount: gmTokenAmount,
      minLongTokenAmount: minLongTokens,
      minShortTokenAmount: minShortTokens,
      gasLimit: 1_000_000
    });
    IRebalanceHLPv2Service.WithdrawalParams[] memory withdrawalParams = new IRebalanceHLPv2Service.WithdrawalParams[](
      1
    );
    withdrawalParams[0] = withdrawalParam;

    if (!String.isEmpty(errSignature)) {
      vm.expectRevert(abi.encodeWithSignature(errSignature));
    }
    bytes32[] memory gmxDepositOrderKeys = rebalanceHLPv2Handler.createWithdrawalOrders{
      value: REBALANCE_HLPv2_MIN_EXECUTION_FEE
    }(withdrawalParams, executionFee);

    if (gmxDepositOrderKeys.length == 0) {
      return bytes32(0);
    }

    return gmxDepositOrderKeys[0];
  }

  function rebalanceHLPv2_createWithdrawalOrder(
    bytes32 market,
    uint256 gmTokenAmount,
    uint256 minLongTokens,
    uint256 minShortTokens
  ) internal returns (bytes32) {
    return rebalanceHLPv2_createWithdrawalOrder(market, gmTokenAmount, minLongTokens, minShortTokens, "");
  }

  function rebalanceHLP_withdrawGlp(address tokenOut, uint256 glpAmount) internal returns (uint256 amountOut) {
    (
      bytes32[] memory priceData,
      bytes32[] memory publishedTimeData,
      uint256 minPublishedTime,
      bytes32 encodedVaas
    ) = MockEcoPyth(address(ecoPyth2)).getLastestPriceUpdateData();

    IRebalanceHLPService.WithdrawGlpParams[] memory withdrawParams = new IRebalanceHLPService.WithdrawGlpParams[](1);
    withdrawParams[0] = IRebalanceHLPService.WithdrawGlpParams({ token: tokenOut, glpAmount: glpAmount, minOut: 0 });

    vm.startPrank(multiSig);
    IRebalanceHLPService.WithdrawGlpResult[] memory ret = rebalanceHLPHandler.withdrawGlp(
      withdrawParams,
      priceData,
      publishedTimeData,
      minPublishedTime,
      encodedVaas
    );
    vm.stopPrank();

    if (ret.length == 0) {
      return 0;
    }

    return ret[0].amount;
  }

  function rebalanceHLP_swap(uint256 amountIn, address[] memory path) internal returns (uint256 amountOut) {
    (
      bytes32[] memory priceData,
      bytes32[] memory publishedTimeData,
      uint256 minPublishedTime,
      bytes32 encodedVaas
    ) = MockEcoPyth(address(ecoPyth2)).getLastestPriceUpdateData();

    IRebalanceHLPService.SwapParams memory swapParams = IRebalanceHLPService.SwapParams({
      amountIn: amountIn,
      minAmountOut: 0,
      path: path
    });

    vm.startPrank(multiSig);
    amountOut = rebalanceHLPHandler.swap(swapParams, priceData, publishedTimeData, minPublishedTime, encodedVaas);
    vm.stopPrank();

    return amountOut;
  }

  function gmxV2Keeper_executeDepositOrder(bytes32 market, bytes32 depositOrderId) internal {
    address[] memory tokens;
    address[] memory providers;
    bytes[] memory data;

    if (market == GM_WBTCUSDC_ASSET_ID) {
      // For BTCUSDC, we need to set the price for 0x479 as well as wbtc and usdc
      tokens = new address[](3);
      providers = new address[](3);
      data = new bytes[](3);
      // Index token
      tokens[0] = 0x47904963fc8b2340414262125aF798B9655E58Cd;
      // Long token
      tokens[1] = address(wbtc);
      // Short token
      tokens[2] = address(usdc);

      providers[0] = gmxV2OracleProvider;
      providers[1] = gmxV2OracleProvider;
      providers[2] = gmxV2OracleProvider;

      data[
        0
      ] = hex"0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec000000000000000000000000000000000000000000000000000000001c4f6602000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000001010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b800000000000000000000000000000000000000000000000000000000671f0c6400000000000000000000000000000000000000000000000000000000671f0c64000000000000000000000000000000000000000000000000000075af265fdfc00000000000000000000000000000000000000000000000000069a97aa77e53080000000000000000000000000000000000000000000000000000000067205de4000000000000000000000000000000000000000000000e513ad190feb6ae7700000000000000000000000000000000000000000000000e513a28c5ce233c2c00000000000000000000000000000000000000000000000e516d34a15973fea00000000000000000000000000000000000000000000000000000000000000000061aa1dec13359b463067a792464f85675ae1b53633475f10c1457cc1e4bd4695b996d8a71fa6cd7ef8ff7c435d425cbbb8ae0252ddeed2b7e5c08861ec12d2351ec5218fff721379674d2bdf794ea0a35aba7a839be2fc7ea71cdc0d54946e6a260e7421f2604b906dd8c00e878f7c1915e942415ccbe63a22e304138bfe409b64edb6be783c177b6c7389af24f3b456de529db76bed9170e2f7ee00d81c944ee271640b321bdcba4ba2a8d4eb96baa10d214d2e6e7906fd9b448e7f6f225dcc30000000000000000000000000000000000000000000000000000000000000006043b1e13bc05e8173da391c5c85f938f3d6c56fe37c367cc6af817741bc952b32076f4f68870a35d5ca3809ce1bff78a9c695bbbb1c0b8e9b2c68a34c6ffedcc2df216c0b2a71f0d1d9b31e68dcce9e1aec2d0e3a3296a5799915c5f46f60bb443df2f9af767ce10f88f0d87c8cbf1c6a55f89cc23d0edde0a181ec01f60a18e5fb8ce48af903dc130eac02f3537e05590fc0788e20f402fac022f7ebd0fe39e212da56ce99c6ed89227e99b47da54b082e5b2ebc1e6479fb26ce3fc2f32cb68";
      data[
        1
      ] = hex"00064c28ccf99cc505d648ffcbc4c2c613859826fd4552841a6822b51800d961000000000000000000000000000000000000000000000000000000001c4de615000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000100010100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000038f83323b6b08116d1614cf33a9bd71ab5e0abf0c9f1b783a74a43e7bd99200000000000000000000000000000000000000000000000000000000671f0c6400000000000000000000000000000000000000000000000000000000671f0c64000000000000000000000000000000000000000000000000000075af265fdfc00000000000000000000000000000000000000000000000000069a97aa77e53080000000000000000000000000000000000000000000000000000000067205de40000000000000000000000000000000000000000000000000de01731786831e40000000000000000000000000000000000000000000000000ddfe9bfd9906bfc0000000000000000000000000000000000000000000000000de044a3173ff7680000000000000000000000000000000000000000000000000000000000000006561963342c0a9bb3f249694127a555400094dcb71c8d38ec81400ea05fb97e9e709240e73875fb7a7351a4d475ccf856f0c29e63cda04e0a1526c231458631ad2ebf0f1becc7eabf9072d8bb4d290373319f5edb895a375e88ea2b9fbe199cde6c2652376847cac336de31849248903529582c667e849505cc82fac4764e4d479bc6de4f73b8fce426b8694cc4ca1231e10a8516003105290223128d7b9055ae152da42a4e98711d60a2484a451cf7e81055dae271267d9155c7896e868212420000000000000000000000000000000000000000000000000000000000000006573ac295d1a5cde0a4ae1359018406ee4bbfbd6b4ff4736b0a71d3462f8728f66060f09a4c7d95ab6f9bc5809cf1376f949dc108014f459fe4a6ebf0abfcb4070910adc55bd67d6ab9d82abb8158f6ebbe2aeea0f25e506c9ff82ae4ae362a203bae16a11751e5bc29b00158d8c5a2db86a01416d94f146a2e06ba3281ab67282f5571cc59a3ea979713883190e359bb4c1ff1a4936e2416b0006379dbe789257604a809361d564bb9f57f59cc8ee054a1752fe340eaa474578c15552161eeff";
      data[
        2
      ] = hex"0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec000000000000000000000000000000000000000000000000000000001c4f6602000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000001010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b800000000000000000000000000000000000000000000000000000000671f0c6400000000000000000000000000000000000000000000000000000000671f0c64000000000000000000000000000000000000000000000000000075af265fdfc00000000000000000000000000000000000000000000000000069a97aa77e53080000000000000000000000000000000000000000000000000000000067205de4000000000000000000000000000000000000000000000e513ad190feb6ae7700000000000000000000000000000000000000000000000e513a28c5ce233c2c00000000000000000000000000000000000000000000000e516d34a15973fea00000000000000000000000000000000000000000000000000000000000000000061aa1dec13359b463067a792464f85675ae1b53633475f10c1457cc1e4bd4695b996d8a71fa6cd7ef8ff7c435d425cbbb8ae0252ddeed2b7e5c08861ec12d2351ec5218fff721379674d2bdf794ea0a35aba7a839be2fc7ea71cdc0d54946e6a260e7421f2604b906dd8c00e878f7c1915e942415ccbe63a22e304138bfe409b64edb6be783c177b6c7389af24f3b456de529db76bed9170e2f7ee00d81c944ee271640b321bdcba4ba2a8d4eb96baa10d214d2e6e7906fd9b448e7f6f225dcc30000000000000000000000000000000000000000000000000000000000000006043b1e13bc05e8173da391c5c85f938f3d6c56fe37c367cc6af817741bc952b32076f4f68870a35d5ca3809ce1bff78a9c695bbbb1c0b8e9b2c68a34c6ffedcc2df216c0b2a71f0d1d9b31e68dcce9e1aec2d0e3a3296a5799915c5f46f60bb443df2f9af767ce10f88f0d87c8cbf1c6a55f89cc23d0edde0a181ec01f60a18e5fb8ce48af903dc130eac02f3537e05590fc0788e20f402fac022f7ebd0fe39e212da56ce99c6ed89227e99b47da54b082e5b2ebc1e6479fb26ce3fc2f32cb68";
    } else if (market == GM_ETHUSDC_ASSET_ID) {
      // For ETHUSDC, only ETH and USDC are needed
      tokens = new address[](2);
      providers = new address[](2);
      data = new bytes[](2);
      // Long token
      tokens[0] = address(weth);
      // Short token
      tokens[1] = address(usdc);

      providers[0] = gmxV2OracleProvider;
      providers[1] = gmxV2OracleProvider;

      data[
        0
      ] = hex"0006f100c86a0007ed73322d6e26606c9985fd511be9d92cf5af6b3dda8143c7000000000000000000000000000000000000000000000000000000001cf31c02000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030000010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000362205e10b3a147d02792eccee483dca6c7b44ecce7012cb8c6e0b68b3ae900000000000000000000000000000000000000000000000000000000671f0c6400000000000000000000000000000000000000000000000000000000671f0c64000000000000000000000000000000000000000000000000000075aeba1b9d400000000000000000000000000000000000000000000000000069a97aa77e53080000000000000000000000000000000000000000000000000000000067205de400000000000000000000000000000000000000000000008610e1250f830c000000000000000000000000000000000000000000000000008610299fd341ef064000000000000000000000000000000000000000000000008612bd57007ece50000000000000000000000000000000000000000000000000000000000000000006948df7c88cc429c13aab3d97dbfcbaed3513eaa39e95238a9c31bc20fcf8f88018f6f22bd1711d9f7b004f515baa2e154e98947d43c9f070a1bab69d59aa05841481c4b2469abf9187264d7c6bd3b6f42996f5aa47f6284358e3541e8b7a7873d098d57bb5d506323b5989821c21da5f6466404e8290df7e998c2f9146dfa5bd8dd509d2c9819d4cfe1610a9467a1dd918f6e59cb5ecd7dcd7abf662174b3da40d84b097c339527b420ed1e859d9566b1ed34763c71012aa1f758cace24c342600000000000000000000000000000000000000000000000000000000000000064083b49f9433986df0c666f313e4c1d819a45def0b6ced031227b38358cbcc2c2d9d594999765393ec391ae1641acdbe339604a55a8cb72df46ee2c111ba012244a79b605291ddadcca5c4a6bab906502a052bccf9d99871f9f1b1546c5e15ce40e84c00dd835720eaeb9ef2e4e1462a8a9325261bd1a19b626a527a8262070c4229412a98b37c54a1695ae92fe3ce0b436db20cdd59ba7ea1df2e2a945e1db4768ce877d56642e06b13ebb30c5c424b4afcc259c1ea8dab7a65149d7f0fedb8";
      data[
        1
      ] = hex"00064c28ccf99cc505d648ffcbc4c2c613859826fd4552841a6822b51800d961000000000000000000000000000000000000000000000000000000001c4de615000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000100010100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000038f83323b6b08116d1614cf33a9bd71ab5e0abf0c9f1b783a74a43e7bd99200000000000000000000000000000000000000000000000000000000671f0c6400000000000000000000000000000000000000000000000000000000671f0c64000000000000000000000000000000000000000000000000000075af265fdfc00000000000000000000000000000000000000000000000000069a97aa77e53080000000000000000000000000000000000000000000000000000000067205de40000000000000000000000000000000000000000000000000de01731786831e40000000000000000000000000000000000000000000000000ddfe9bfd9906bfc0000000000000000000000000000000000000000000000000de044a3173ff7680000000000000000000000000000000000000000000000000000000000000006561963342c0a9bb3f249694127a555400094dcb71c8d38ec81400ea05fb97e9e709240e73875fb7a7351a4d475ccf856f0c29e63cda04e0a1526c231458631ad2ebf0f1becc7eabf9072d8bb4d290373319f5edb895a375e88ea2b9fbe199cde6c2652376847cac336de31849248903529582c667e849505cc82fac4764e4d479bc6de4f73b8fce426b8694cc4ca1231e10a8516003105290223128d7b9055ae152da42a4e98711d60a2484a451cf7e81055dae271267d9155c7896e868212420000000000000000000000000000000000000000000000000000000000000006573ac295d1a5cde0a4ae1359018406ee4bbfbd6b4ff4736b0a71d3462f8728f66060f09a4c7d95ab6f9bc5809cf1376f949dc108014f459fe4a6ebf0abfcb4070910adc55bd67d6ab9d82abb8158f6ebbe2aeea0f25e506c9ff82ae4ae362a203bae16a11751e5bc29b00158d8c5a2db86a01416d94f146a2e06ba3281ab67282f5571cc59a3ea979713883190e359bb4c1ff1a4936e2416b0006379dbe789257604a809361d564bb9f57f59cc8ee054a1752fe340eaa474578c15552161eeff";
    }

    gmxV2DepositHandler.executeDeposit(
      depositOrderId,
      IGmxV2Oracle.SetPricesParams({ tokens: tokens, providers: providers, data: data })
    );
  }

  function gmxV2Keeper_executeWithdrawalOrder(bytes32 market, bytes32 withdrawalOrderId) internal {
    address[] memory tokens;
    address[] memory providers;
    bytes[] memory data;

    if (market == GM_WBTCUSDC_ASSET_ID) {
      // For BTCUSDC, we need to set the price for 0x479 as well as wbtc and usdc
      tokens = new address[](3);
      providers = new address[](3);
      data = new bytes[](3);
      // Index token
      tokens[0] = 0x47904963fc8b2340414262125aF798B9655E58Cd;
      // Long token
      tokens[1] = address(wbtc);
      // Short token
      tokens[2] = address(usdc);

      providers[0] = gmxV2OracleProvider;
      providers[1] = gmxV2OracleProvider;
      providers[2] = gmxV2OracleProvider;

      data[
        0
      ] = hex"0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec000000000000000000000000000000000000000000000000000000001c4f6602000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000001010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b800000000000000000000000000000000000000000000000000000000671f0c6400000000000000000000000000000000000000000000000000000000671f0c64000000000000000000000000000000000000000000000000000075af265fdfc00000000000000000000000000000000000000000000000000069a97aa77e53080000000000000000000000000000000000000000000000000000000067205de4000000000000000000000000000000000000000000000e513ad190feb6ae7700000000000000000000000000000000000000000000000e513a28c5ce233c2c00000000000000000000000000000000000000000000000e516d34a15973fea00000000000000000000000000000000000000000000000000000000000000000061aa1dec13359b463067a792464f85675ae1b53633475f10c1457cc1e4bd4695b996d8a71fa6cd7ef8ff7c435d425cbbb8ae0252ddeed2b7e5c08861ec12d2351ec5218fff721379674d2bdf794ea0a35aba7a839be2fc7ea71cdc0d54946e6a260e7421f2604b906dd8c00e878f7c1915e942415ccbe63a22e304138bfe409b64edb6be783c177b6c7389af24f3b456de529db76bed9170e2f7ee00d81c944ee271640b321bdcba4ba2a8d4eb96baa10d214d2e6e7906fd9b448e7f6f225dcc30000000000000000000000000000000000000000000000000000000000000006043b1e13bc05e8173da391c5c85f938f3d6c56fe37c367cc6af817741bc952b32076f4f68870a35d5ca3809ce1bff78a9c695bbbb1c0b8e9b2c68a34c6ffedcc2df216c0b2a71f0d1d9b31e68dcce9e1aec2d0e3a3296a5799915c5f46f60bb443df2f9af767ce10f88f0d87c8cbf1c6a55f89cc23d0edde0a181ec01f60a18e5fb8ce48af903dc130eac02f3537e05590fc0788e20f402fac022f7ebd0fe39e212da56ce99c6ed89227e99b47da54b082e5b2ebc1e6479fb26ce3fc2f32cb68";
      data[
        1
      ] = hex"00064c28ccf99cc505d648ffcbc4c2c613859826fd4552841a6822b51800d961000000000000000000000000000000000000000000000000000000001c4de615000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000100010100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000038f83323b6b08116d1614cf33a9bd71ab5e0abf0c9f1b783a74a43e7bd99200000000000000000000000000000000000000000000000000000000671f0c6400000000000000000000000000000000000000000000000000000000671f0c64000000000000000000000000000000000000000000000000000075af265fdfc00000000000000000000000000000000000000000000000000069a97aa77e53080000000000000000000000000000000000000000000000000000000067205de40000000000000000000000000000000000000000000000000de01731786831e40000000000000000000000000000000000000000000000000ddfe9bfd9906bfc0000000000000000000000000000000000000000000000000de044a3173ff7680000000000000000000000000000000000000000000000000000000000000006561963342c0a9bb3f249694127a555400094dcb71c8d38ec81400ea05fb97e9e709240e73875fb7a7351a4d475ccf856f0c29e63cda04e0a1526c231458631ad2ebf0f1becc7eabf9072d8bb4d290373319f5edb895a375e88ea2b9fbe199cde6c2652376847cac336de31849248903529582c667e849505cc82fac4764e4d479bc6de4f73b8fce426b8694cc4ca1231e10a8516003105290223128d7b9055ae152da42a4e98711d60a2484a451cf7e81055dae271267d9155c7896e868212420000000000000000000000000000000000000000000000000000000000000006573ac295d1a5cde0a4ae1359018406ee4bbfbd6b4ff4736b0a71d3462f8728f66060f09a4c7d95ab6f9bc5809cf1376f949dc108014f459fe4a6ebf0abfcb4070910adc55bd67d6ab9d82abb8158f6ebbe2aeea0f25e506c9ff82ae4ae362a203bae16a11751e5bc29b00158d8c5a2db86a01416d94f146a2e06ba3281ab67282f5571cc59a3ea979713883190e359bb4c1ff1a4936e2416b0006379dbe789257604a809361d564bb9f57f59cc8ee054a1752fe340eaa474578c15552161eeff";
      data[
        2
      ] = hex"0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec000000000000000000000000000000000000000000000000000000001c4f6602000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000001010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b800000000000000000000000000000000000000000000000000000000671f0c6400000000000000000000000000000000000000000000000000000000671f0c64000000000000000000000000000000000000000000000000000075af265fdfc00000000000000000000000000000000000000000000000000069a97aa77e53080000000000000000000000000000000000000000000000000000000067205de4000000000000000000000000000000000000000000000e513ad190feb6ae7700000000000000000000000000000000000000000000000e513a28c5ce233c2c00000000000000000000000000000000000000000000000e516d34a15973fea00000000000000000000000000000000000000000000000000000000000000000061aa1dec13359b463067a792464f85675ae1b53633475f10c1457cc1e4bd4695b996d8a71fa6cd7ef8ff7c435d425cbbb8ae0252ddeed2b7e5c08861ec12d2351ec5218fff721379674d2bdf794ea0a35aba7a839be2fc7ea71cdc0d54946e6a260e7421f2604b906dd8c00e878f7c1915e942415ccbe63a22e304138bfe409b64edb6be783c177b6c7389af24f3b456de529db76bed9170e2f7ee00d81c944ee271640b321bdcba4ba2a8d4eb96baa10d214d2e6e7906fd9b448e7f6f225dcc30000000000000000000000000000000000000000000000000000000000000006043b1e13bc05e8173da391c5c85f938f3d6c56fe37c367cc6af817741bc952b32076f4f68870a35d5ca3809ce1bff78a9c695bbbb1c0b8e9b2c68a34c6ffedcc2df216c0b2a71f0d1d9b31e68dcce9e1aec2d0e3a3296a5799915c5f46f60bb443df2f9af767ce10f88f0d87c8cbf1c6a55f89cc23d0edde0a181ec01f60a18e5fb8ce48af903dc130eac02f3537e05590fc0788e20f402fac022f7ebd0fe39e212da56ce99c6ed89227e99b47da54b082e5b2ebc1e6479fb26ce3fc2f32cb68";
    } else if (market == GM_ETHUSDC_ASSET_ID) {
      // For ETHUSDC, only ETH and USDC are needed
      tokens = new address[](2);
      providers = new address[](2);
      data = new bytes[](2);
      // Long token
      tokens[0] = address(weth);
      // Short token
      tokens[1] = address(usdc);

      providers[0] = gmxV2OracleProvider;
      providers[1] = gmxV2OracleProvider;

      data[
        0
      ] = hex"0006f100c86a0007ed73322d6e26606c9985fd511be9d92cf5af6b3dda8143c7000000000000000000000000000000000000000000000000000000001cf31c02000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030000010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000362205e10b3a147d02792eccee483dca6c7b44ecce7012cb8c6e0b68b3ae900000000000000000000000000000000000000000000000000000000671f0c6400000000000000000000000000000000000000000000000000000000671f0c64000000000000000000000000000000000000000000000000000075aeba1b9d400000000000000000000000000000000000000000000000000069a97aa77e53080000000000000000000000000000000000000000000000000000000067205de400000000000000000000000000000000000000000000008610e1250f830c000000000000000000000000000000000000000000000000008610299fd341ef064000000000000000000000000000000000000000000000008612bd57007ece50000000000000000000000000000000000000000000000000000000000000000006948df7c88cc429c13aab3d97dbfcbaed3513eaa39e95238a9c31bc20fcf8f88018f6f22bd1711d9f7b004f515baa2e154e98947d43c9f070a1bab69d59aa05841481c4b2469abf9187264d7c6bd3b6f42996f5aa47f6284358e3541e8b7a7873d098d57bb5d506323b5989821c21da5f6466404e8290df7e998c2f9146dfa5bd8dd509d2c9819d4cfe1610a9467a1dd918f6e59cb5ecd7dcd7abf662174b3da40d84b097c339527b420ed1e859d9566b1ed34763c71012aa1f758cace24c342600000000000000000000000000000000000000000000000000000000000000064083b49f9433986df0c666f313e4c1d819a45def0b6ced031227b38358cbcc2c2d9d594999765393ec391ae1641acdbe339604a55a8cb72df46ee2c111ba012244a79b605291ddadcca5c4a6bab906502a052bccf9d99871f9f1b1546c5e15ce40e84c00dd835720eaeb9ef2e4e1462a8a9325261bd1a19b626a527a8262070c4229412a98b37c54a1695ae92fe3ce0b436db20cdd59ba7ea1df2e2a945e1db4768ce877d56642e06b13ebb30c5c424b4afcc259c1ea8dab7a65149d7f0fedb8";
      data[
        1
      ] = hex"00064c28ccf99cc505d648ffcbc4c2c613859826fd4552841a6822b51800d961000000000000000000000000000000000000000000000000000000001c4de615000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000100010100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000038f83323b6b08116d1614cf33a9bd71ab5e0abf0c9f1b783a74a43e7bd99200000000000000000000000000000000000000000000000000000000671f0c6400000000000000000000000000000000000000000000000000000000671f0c64000000000000000000000000000000000000000000000000000075af265fdfc00000000000000000000000000000000000000000000000000069a97aa77e53080000000000000000000000000000000000000000000000000000000067205de40000000000000000000000000000000000000000000000000de01731786831e40000000000000000000000000000000000000000000000000ddfe9bfd9906bfc0000000000000000000000000000000000000000000000000de044a3173ff7680000000000000000000000000000000000000000000000000000000000000006561963342c0a9bb3f249694127a555400094dcb71c8d38ec81400ea05fb97e9e709240e73875fb7a7351a4d475ccf856f0c29e63cda04e0a1526c231458631ad2ebf0f1becc7eabf9072d8bb4d290373319f5edb895a375e88ea2b9fbe199cde6c2652376847cac336de31849248903529582c667e849505cc82fac4764e4d479bc6de4f73b8fce426b8694cc4ca1231e10a8516003105290223128d7b9055ae152da42a4e98711d60a2484a451cf7e81055dae271267d9155c7896e868212420000000000000000000000000000000000000000000000000000000000000006573ac295d1a5cde0a4ae1359018406ee4bbfbd6b4ff4736b0a71d3462f8728f66060f09a4c7d95ab6f9bc5809cf1376f949dc108014f459fe4a6ebf0abfcb4070910adc55bd67d6ab9d82abb8158f6ebbe2aeea0f25e506c9ff82ae4ae362a203bae16a11751e5bc29b00158d8c5a2db86a01416d94f146a2e06ba3281ab67282f5571cc59a3ea979713883190e359bb4c1ff1a4936e2416b0006379dbe789257604a809361d564bb9f57f59cc8ee054a1752fe340eaa474578c15552161eeff";
    }

    gmxV2WithdrawalHandler.executeWithdrawal(
      withdrawalOrderId,
      IGmxV2Oracle.SetPricesParams({ tokens: tokens, providers: providers, data: data })
    );
  }
}
