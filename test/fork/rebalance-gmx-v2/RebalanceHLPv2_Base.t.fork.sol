// SPDX-License-Identifier: BUSL-1.1
// This code is made available under the terms and conditions of the Business Source License 1.1 (BUSL-1.1).
// The act of publishing this code is driven by the aim to promote transparency and facilitate its utilization for educational purposes.

pragma solidity 0.8.18;

/// HMX
import { IRebalanceHLPService } from "@hmx/services/interfaces/IRebalanceHLPService.sol";
import { IRebalanceHLPv2Handler } from "@hmx/handlers/interfaces/IRebalanceHLPv2Handler.sol";
import { IRebalanceHLPv2Service } from "@hmx/services/interfaces/IRebalanceHLPv2Service.sol";
import { IConfigStorage } from "@hmx/storages/interfaces/IConfigStorage.sol";
import { IGmxV2Oracle } from "@hmx/interfaces/gmx-v2/IGmxV2Oracle.sol";
import { IWNative } from "@hmx/interfaces/IWNative.sol";

/// HMX Tests
import { ForkEnvWithActions } from "@hmx-test/fork/bases/ForkEnvWithActions.sol";
import { Cheats } from "@hmx-test/base/Cheats.sol";
import { Deployer } from "@hmx-test/libs/Deployer.sol";
import { String } from "@hmx-test/libs/String.sol";
import { MockArbSys } from "@hmx-test/mocks/MockArbSys.sol";
import { MockEcoPyth } from "@hmx-test/mocks/MockEcoPyth.sol";
import { MockGmxV2Oracle } from "@hmx-test/mocks/MockGmxV2Oracle.sol";
import { LimitTradeHelper } from "@hmx/helpers/LimitTradeHelper.sol";
import { MockSwapPricingUtils } from "@hmx-test/mocks/MockSwapPricingUtils.sol";
import { DataStore } from "@hmx/interfaces/gmx-v2/DataStore.sol";

abstract contract RebalanceHLPv2Service_BaseForkTest is ForkEnvWithActions, Cheats {
  bytes32 internal constant GM_WBTCUSDC_ASSET_ID = "GM(WBTC-USDC)";
  bytes32 internal constant GM_ETHUSDC_ASSET_ID = "GM(ETH-USDC)";
  bytes32 internal constant USDC_NATIVE_ASSET_ID = "USDC(native)";

  struct GmMarketConfig {
    address marketAddress;
    address longToken;
    address shortToken;
  }
  mapping(bytes32 gmMarketAssetId => GmMarketConfig config) internal gmMarketConfigs;

  uint256 internal constant REBALANCE_HLPv2_MIN_EXECUTION_FEE = 0.001 ether;
  IRebalanceHLPv2Handler rebalanceHLPv2Handler;
  IRebalanceHLPv2Service rebalanceHLPv2Service;

  struct SnapshotUint256 {
    uint256 before;
    uint256 after1;
  }

  function setUp() public virtual {
    // Mock ArbSys
    MockArbSys arbSys = new MockArbSys();
    vm.etch(0x0000000000000000000000000000000000000064, address(arbSys).code);

    // Mock GmxV2Oracle
    MockGmxV2Oracle mockGmxV2Oracle = new MockGmxV2Oracle();
    vm.etch(gmxV2DepositHandler.oracle(), address(mockGmxV2Oracle).code);
    // MockSwapPricingUtils mockSwapPricingUtils = new MockSwapPricingUtils();
    // vm.etch(0x6bB5894e971EdDE873C89033f1FF77dE01A4049b, address(mockSwapPricingUtils).code);

    // Mock EcoPyth
    makeEcoPythMockable();

    rebalanceHLPv2Service = Deployer.deployRebalanceHLPv2Service(
      address(proxyAdmin),
      address(weth),
      address(vaultStorage),
      address(configStorage),
      address(gmxV2ExchangeRouter),
      gmxV2DepositVault,
      address(gmxV2DepositHandler),
      address(gmxV2WithdrawalVault),
      address(gmxV2WithdrawalHandler)
    );
    rebalanceHLPv2Handler = Deployer.deployRebalanceHLPv2Handler(
      address(proxyAdmin),
      address(rebalanceHLPv2Service),
      address(weth),
      REBALANCE_HLPv2_MIN_EXECUTION_FEE
    );
    rebalanceHLPv2Handler.setWhitelistExecutor(address(this), true);

    // Upgrade dependencies
    vm.startPrank(proxyAdmin.owner());
    Deployer.upgrade("VaultStorage", address(proxyAdmin), address(vaultStorage));
    Deployer.upgrade("ConfigStorage", address(proxyAdmin), address(configStorage));
    Deployer.upgrade("Calculator", address(proxyAdmin), address(calculator));
    Deployer.upgrade("RebalanceHLPHandler", address(proxyAdmin), address(rebalanceHLPHandler));
    Deployer.upgrade("RebalanceHLPService", address(proxyAdmin), address(rebalanceHLPService));
    Deployer.upgrade("PerpStorage", address(proxyAdmin), address(perpStorage));
    Deployer.upgrade("TradeService", address(proxyAdmin), address(tradeService));
    Deployer.upgrade("TradeHelper", address(proxyAdmin), address(tradeHelper));
    vm.stopPrank();

    // Setup
    vm.startPrank(configStorage.owner());
    vaultStorage.setServiceExecutors(address(rebalanceHLPv2Service), true);
    vaultStorage.setServiceExecutors(address(this), true); // For testing pullToken
    configStorage.setServiceExecutor(address(rebalanceHLPv2Service), address(address(rebalanceHLPv2Handler)), true);
    vm.stopPrank();

    // Adding USDC (native), GM(WBTC-USDC), and GM(ETH-USDC) as a liquidity
    vm.startPrank(multiSig);
    bytes32[] memory newAssetIds = new bytes32[](3);
    newAssetIds[0] = GM_WBTCUSDC_ASSET_ID;
    newAssetIds[1] = GM_ETHUSDC_ASSET_ID;
    newAssetIds[2] = USDC_NATIVE_ASSET_ID;
    ecoPyth2.insertAssetIds(newAssetIds);
    pythAdapter.setConfig(GM_WBTCUSDC_ASSET_ID, GM_WBTCUSDC_ASSET_ID, false);
    pythAdapter.setConfig(GM_ETHUSDC_ASSET_ID, GM_ETHUSDC_ASSET_ID, false);
    pythAdapter.setConfig(USDC_NATIVE_ASSET_ID, USDC_NATIVE_ASSET_ID, true);
    oracleMiddleware.setAssetPriceConfig(GM_WBTCUSDC_ASSET_ID, 0, 60 * 5, address(pythAdapter));
    oracleMiddleware.setAssetPriceConfig(GM_ETHUSDC_ASSET_ID, 0, 60 * 5, address(pythAdapter));
    oracleMiddleware.setAssetPriceConfig(USDC_NATIVE_ASSET_ID, 0, 60 * 5, address(pythAdapter));
    configStorage.setAssetConfig(
      GM_WBTCUSDC_ASSET_ID,
      IConfigStorage.AssetConfig({
        assetId: GM_WBTCUSDC_ASSET_ID,
        tokenAddress: address(gmBTCUSD),
        decimals: 18,
        isStableCoin: false
      })
    );
    configStorage.setAssetConfig(
      GM_ETHUSDC_ASSET_ID,
      IConfigStorage.AssetConfig({
        assetId: GM_ETHUSDC_ASSET_ID,
        tokenAddress: address(gmETHUSD),
        decimals: 18,
        isStableCoin: false
      })
    );
    configStorage.setAssetConfig(
      USDC_NATIVE_ASSET_ID,
      IConfigStorage.AssetConfig({
        assetId: USDC_NATIVE_ASSET_ID,
        tokenAddress: address(usdc),
        decimals: 6,
        isStableCoin: true
      })
    );
    IConfigStorage.CollateralTokenConfig[]
      memory newCollateralTokenConfigs = new IConfigStorage.CollateralTokenConfig[](3);
    newCollateralTokenConfigs[0] = IConfigStorage.CollateralTokenConfig({
      collateralFactorBPS: 0.8 * 100_00,
      accepted: true,
      settleStrategy: address(0)
    });
    newCollateralTokenConfigs[1] = IConfigStorage.CollateralTokenConfig({
      collateralFactorBPS: 0.8 * 100_00,
      accepted: true,
      settleStrategy: address(0)
    });
    newCollateralTokenConfigs[2] = IConfigStorage.CollateralTokenConfig({
      collateralFactorBPS: 1 * 100_00,
      accepted: true,
      settleStrategy: address(0)
    });
    configStorage.setCollateralTokenConfigs(newAssetIds, newCollateralTokenConfigs);
    address[] memory newAssetAddresses = new address[](3);
    newAssetAddresses[0] = address(gmBTCUSD);
    newAssetAddresses[1] = address(gmETHUSD);
    newAssetAddresses[2] = address(usdc);
    IConfigStorage.HLPTokenConfig[] memory newHlpTokenConfigs = new IConfigStorage.HLPTokenConfig[](3);
    newHlpTokenConfigs[0] = IConfigStorage.HLPTokenConfig({
      targetWeight: 0,
      bufferLiquidity: 0,
      maxWeightDiff: 1000 ether,
      accepted: false
    });
    newHlpTokenConfigs[1] = IConfigStorage.HLPTokenConfig({
      targetWeight: 0,
      bufferLiquidity: 0,
      maxWeightDiff: 1000 ether,
      accepted: false
    });
    newHlpTokenConfigs[2] = IConfigStorage.HLPTokenConfig({
      targetWeight: 0,
      bufferLiquidity: 0,
      maxWeightDiff: 1000 ether,
      accepted: false
    });
    address[] memory newHlpTokenAddresses = new address[](3);
    newHlpTokenAddresses[0] = address(gmBTCUSD);
    newHlpTokenAddresses[1] = address(gmETHUSD);
    newHlpTokenAddresses[2] = address(usdc);
    configStorage.addOrUpdateAcceptedToken(newHlpTokenAddresses, newHlpTokenConfigs);
    vm.stopPrank();

    // Set Dexter for USDC native
    vm.startPrank(deployer);
    uniswapDexter.setPathOf(
      address(usdc),
      address(usdc_e),
      abi.encodePacked(address(usdc), uint24(100), address(usdc_e))
    );
    uniswapDexter.setPathOf(
      address(usdc_e),
      address(usdc),
      abi.encodePacked(address(usdc_e), uint24(100), address(usdc))
    );
    switchCollateralRouter.setDexterOf(address(usdc), address(usdc_e), address(uniswapDexter));
    switchCollateralRouter.setDexterOf(address(usdc_e), address(usdc), address(uniswapDexter));
    vm.stopPrank();

    // Grant required roles
    vm.startPrank(gmxV2Timelock);
    gmxV2RoleStore.grantRole(address(this), keccak256(abi.encode("ORDER_KEEPER")));
    gmxV2RoleStore.grantRole(address(this), keccak256(abi.encode("CONTROLLER")));
    vm.stopPrank();

    // Override max pnl factor to prevent revert during execution
    DataStore(gmxV2DataStore).setUint(
      0x182144b887d7d49652d201a8c903633c12d712437e561d81a84081fbb4c94afc,
      1000000000000000000000000000000
    );

    // Setup GM(WBTC-USDC) config
    gmMarketConfigs[GM_WBTCUSDC_ASSET_ID] = GmMarketConfig({
      marketAddress: address(gmBTCUSD),
      longToken: address(wbtc),
      shortToken: address(usdc)
    });
    // Setup GM(ETH-USDC) config
    gmMarketConfigs[GM_ETHUSDC_ASSET_ID] = GmMarketConfig({
      marketAddress: address(gmETHUSD),
      longToken: address(weth),
      shortToken: address(usdc)
    });

    vm.label(address(rebalanceHLPv2Handler), "RebalanceHLPv2Handler");
    vm.label(address(rebalanceHLPv2Service), "RebalanceHLPv2Service");

    // Override prices
    MockEcoPyth(address(ecoPyth2)).overridePrice(GM_WBTCUSDC_ASSET_ID, 1.11967292 * 1e8);
    MockEcoPyth(address(ecoPyth2)).overridePrice(GM_ETHUSDC_ASSET_ID, 0.98014296 * 1e8);
    MockEcoPyth(address(ecoPyth2)).overridePrice(USDC_NATIVE_ASSET_ID, 1 * 1e8);

    uint256[] memory _marketIndexes = new uint256[](2);
    _marketIndexes[0] = 0;
    _marketIndexes[1] = 1;
    uint256[] memory _positionSizeLimits = new uint256[](2);
    _positionSizeLimits[0] = 20_000_000 * 1e30;
    _positionSizeLimits[1] = 20_000_000 * 1e30;
    uint256[] memory _tradeSizeLimits = new uint256[](2);
    _tradeSizeLimits[0] = 20_000_000 * 1e30;
    _tradeSizeLimits[1] = 20_000_000 * 1e30;

    vm.prank(0x6409ba830719cd0fE27ccB3051DF1b399C90df4a);
    LimitTradeHelper(0x0E7C0d58f2e4a6b28597D51a34C4b7acDA1Ee719).setLimit(
      _marketIndexes,
      _positionSizeLimits,
      _tradeSizeLimits
    );
  }

  function rebalanceHLPv2_createDepositOrder(
    bytes32 market,
    uint256 longTokenAmount,
    uint256 shortTokenAmount,
    uint256 minMarketTokens,
    string memory errSignature
  ) internal returns (bytes32) {
    // Preps
    IRebalanceHLPv2Service.DepositParams memory depositParam = IRebalanceHLPv2Service.DepositParams({
      market: gmMarketConfigs[market].marketAddress,
      longToken: gmMarketConfigs[market].longToken,
      longTokenAmount: longTokenAmount,
      shortToken: gmMarketConfigs[market].shortToken,
      shortTokenAmount: shortTokenAmount,
      minMarketTokens: minMarketTokens,
      gasLimit: 1_000_000
    });
    IRebalanceHLPv2Service.DepositParams[] memory depositParams = new IRebalanceHLPv2Service.DepositParams[](1);
    depositParams[0] = depositParam;

    if (!String.isEmpty(errSignature)) {
      vm.expectRevert(abi.encodeWithSignature(errSignature));
    }
    bytes32[] memory gmxDepositOrderKeys = rebalanceHLPv2Handler.createDepositOrders{
      value: REBALANCE_HLPv2_MIN_EXECUTION_FEE
    }(depositParams, REBALANCE_HLPv2_MIN_EXECUTION_FEE);

    if (gmxDepositOrderKeys.length == 0) {
      return bytes32(0);
    }

    return gmxDepositOrderKeys[0];
  }

  function rebalanceHLPv2_createDepositOrder(
    bytes32 market,
    uint256 longTokenAmount,
    uint256 shortTokenAmount,
    uint256 minMarketTokens
  ) internal returns (bytes32) {
    return rebalanceHLPv2_createDepositOrder(market, longTokenAmount, shortTokenAmount, minMarketTokens, "");
  }

  function rebalanceHLPv2_createWithdrawalOrder(
    bytes32 market,
    uint256 gmTokenAmount,
    uint256 minLongTokens,
    uint256 minShortTokens,
    string memory errSignature
  ) internal returns (bytes32) {
    // Preps
    uint256 executionFee = 0.001 ether;
    IRebalanceHLPv2Service.WithdrawalParams memory withdrawalParam = IRebalanceHLPv2Service.WithdrawalParams({
      market: gmMarketConfigs[market].marketAddress,
      amount: gmTokenAmount,
      minLongTokenAmount: minLongTokens,
      minShortTokenAmount: minShortTokens,
      gasLimit: 1_000_000
    });
    IRebalanceHLPv2Service.WithdrawalParams[] memory withdrawalParams = new IRebalanceHLPv2Service.WithdrawalParams[](
      1
    );
    withdrawalParams[0] = withdrawalParam;

    if (!String.isEmpty(errSignature)) {
      vm.expectRevert(abi.encodeWithSignature(errSignature));
    }
    bytes32[] memory gmxDepositOrderKeys = rebalanceHLPv2Handler.createWithdrawalOrders{
      value: REBALANCE_HLPv2_MIN_EXECUTION_FEE
    }(withdrawalParams, executionFee);

    if (gmxDepositOrderKeys.length == 0) {
      return bytes32(0);
    }

    return gmxDepositOrderKeys[0];
  }

  function rebalanceHLPv2_createWithdrawalOrder(
    bytes32 market,
    uint256 gmTokenAmount,
    uint256 minLongTokens,
    uint256 minShortTokens
  ) internal returns (bytes32) {
    return rebalanceHLPv2_createWithdrawalOrder(market, gmTokenAmount, minLongTokens, minShortTokens, "");
  }

  function rebalanceHLP_withdrawGlp(address tokenOut, uint256 glpAmount) internal returns (uint256 amountOut) {
    (
      bytes32[] memory priceData,
      bytes32[] memory publishedTimeData,
      uint256 minPublishedTime,
      bytes32 encodedVaas
    ) = MockEcoPyth(address(ecoPyth2)).getLastestPriceUpdateData();

    IRebalanceHLPService.WithdrawGlpParams[] memory withdrawParams = new IRebalanceHLPService.WithdrawGlpParams[](1);
    withdrawParams[0] = IRebalanceHLPService.WithdrawGlpParams({ token: tokenOut, glpAmount: glpAmount, minOut: 0 });

    vm.startPrank(multiSig);
    IRebalanceHLPService.WithdrawGlpResult[] memory ret = rebalanceHLPHandler.withdrawGlp(
      withdrawParams,
      priceData,
      publishedTimeData,
      minPublishedTime,
      encodedVaas
    );
    vm.stopPrank();

    if (ret.length == 0) {
      return 0;
    }

    return ret[0].amount;
  }

  function rebalanceHLP_swap(uint256 amountIn, address[] memory path) internal returns (uint256 amountOut) {
    (
      bytes32[] memory priceData,
      bytes32[] memory publishedTimeData,
      uint256 minPublishedTime,
      bytes32 encodedVaas
    ) = MockEcoPyth(address(ecoPyth2)).getLastestPriceUpdateData();

    IRebalanceHLPService.SwapParams memory swapParams = IRebalanceHLPService.SwapParams({
      amountIn: amountIn,
      minAmountOut: 0,
      path: path
    });

    vm.startPrank(multiSig);
    amountOut = rebalanceHLPHandler.swap(swapParams, priceData, publishedTimeData, minPublishedTime, encodedVaas);
    vm.stopPrank();

    return amountOut;
  }

  function gmxV2Keeper_executeDepositOrder(bytes32 market, bytes32 depositOrderId) internal {
    address[] memory tokens;
    address[] memory providers;
    bytes[] memory data;

    if (market == GM_WBTCUSDC_ASSET_ID) {
      // For BTCUSDC, we need to set the price for 0x479 as well as wbtc and usdc
      tokens = new address[](3);
      providers = new address[](3);
      data = new bytes[](3);
      // Index token
      tokens[0] = 0x47904963fc8b2340414262125aF798B9655E58Cd;
      // Long token
      tokens[1] = address(wbtc);
      // Short token
      tokens[2] = address(usdc);

      providers[0] = gmxV2OracleProvider;
      providers[1] = gmxV2OracleProvider;
      providers[2] = gmxV2OracleProvider;

      data[
        0
      ] = hex"0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec0000000000000000000000000000000000000000000000000000000020544f15000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000101000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b80000000000000000000000000000000000000000000000000000000067402b460000000000000000000000000000000000000000000000000000000067402b460000000000000000000000000000000000000000000000000000564a42676848000000000000000000000000000000000000000000000000004a4d84d60f9c840000000000000000000000000000000000000000000000000000000067417cc60000000000000000000000000000000000000000000014fa1494ae0b2b67a6000000000000000000000000000000000000000000000014fa13bbbdbb83794c000000000000000000000000000000000000000000000014fa35c79f6a68b7ba0000000000000000000000000000000000000000000000000000000000000000068210b89a177e36d5981364345f5e192e316770bdb81dc0e939faca9349685ce585feb3919640ecf643c074fc029d803156d832a480431bb546f598902af647f97621b3db416266aeaba4888dcee17413c56b8b577644f0968165062c5bdff7805076378bb5cb7064e9d681029d8714faf124be1979c16010b06e55747059f864fd46857aff49a770679966bf24a17c1503d2dbc4f612aa5a6ef7119c315e9b2daa885c9db36d196285274406f444cc93cc64b2e77987e35dbbcba95dc82fd8bb00000000000000000000000000000000000000000000000000000000000000067ded66529a4d2e8fc3a54a142416ddca614a0f6b95c4700d18333410e74b16d2048ac93e2878736455cdf1f5d8cd89a7ea1c375af1287bde138025a1dd831f6b15221b06061d083c39add17158c42071d61783367900b03f3e72506772c146384285d4886d31b5c3215ec95c532e85b9ea862895d493814dd09623648043a5793dc184a2fc5144fcd27bee2ba0fd4edcf41c91d74d5ab44ca1e2f921f13798854a880e4439188c5082137a7f8dbbbb55fc47597725b4b1c870cd1becfe99eba3";
      data[
        1
      ] = hex"0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec0000000000000000000000000000000000000000000000000000000020544f15000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000101000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b80000000000000000000000000000000000000000000000000000000067402b460000000000000000000000000000000000000000000000000000000067402b460000000000000000000000000000000000000000000000000000564a42676848000000000000000000000000000000000000000000000000004a4d84d60f9c840000000000000000000000000000000000000000000000000000000067417cc60000000000000000000000000000000000000000000014fa1494ae0b2b67a6000000000000000000000000000000000000000000000014fa13bbbdbb83794c000000000000000000000000000000000000000000000014fa35c79f6a68b7ba0000000000000000000000000000000000000000000000000000000000000000068210b89a177e36d5981364345f5e192e316770bdb81dc0e939faca9349685ce585feb3919640ecf643c074fc029d803156d832a480431bb546f598902af647f97621b3db416266aeaba4888dcee17413c56b8b577644f0968165062c5bdff7805076378bb5cb7064e9d681029d8714faf124be1979c16010b06e55747059f864fd46857aff49a770679966bf24a17c1503d2dbc4f612aa5a6ef7119c315e9b2daa885c9db36d196285274406f444cc93cc64b2e77987e35dbbcba95dc82fd8bb00000000000000000000000000000000000000000000000000000000000000067ded66529a4d2e8fc3a54a142416ddca614a0f6b95c4700d18333410e74b16d2048ac93e2878736455cdf1f5d8cd89a7ea1c375af1287bde138025a1dd831f6b15221b06061d083c39add17158c42071d61783367900b03f3e72506772c146384285d4886d31b5c3215ec95c532e85b9ea862895d493814dd09623648043a5793dc184a2fc5144fcd27bee2ba0fd4edcf41c91d74d5ab44ca1e2f921f13798854a880e4439188c5082137a7f8dbbbb55fc47597725b4b1c870cd1becfe99eba3";
      data[
        2
      ] = hex"00064c28ccf99cc505d648ffcbc4c2c613859826fd4552841a6822b51800d9610000000000000000000000000000000000000000000000000000000020531e05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000038f83323b6b08116d1614cf33a9bd71ab5e0abf0c9f1b783a74a43e7bd9920000000000000000000000000000000000000000000000000000000067402b460000000000000000000000000000000000000000000000000000000067402b460000000000000000000000000000000000000000000000000000564a42676848000000000000000000000000000000000000000000000000004a4d84d60f9c840000000000000000000000000000000000000000000000000000000067417cc60000000000000000000000000000000000000000000000000de0b85b9ae237bc0000000000000000000000000000000000000000000000000de0375f5d1f40000000000000000000000000000000000000000000000000000de0e6108f4ecd600000000000000000000000000000000000000000000000000000000000000006fc0f7118c4d53ad07c35053a519c275e6efbf0da2d608460d8093968ffb8748b6250c494e69bab56f850ccfaeb4344334d3f971fee43b4175bc126f2c3c78809de85b9b92f9d76236c80b3f285349e3888b7e4d5423157c64cbc5ff5e5d03376ef85fd919991ac96203c6fd42816a43941ffd478e818be3df30b27f69dd060ab2e7f1ecc36405acd161c3bc6fceafe1ff6b8183f79c7003990dab8fd6e5bb10eda06e983a2a580eababc11e2c637f392dbc43ecdbf1e7b631ea096f456bc42e2000000000000000000000000000000000000000000000000000000000000000648a1774588e6fa7176b2bd2fde7580df4d165f86a3c59d6f58ff37bb58f7a3a438e16001026083af0e8bf527814df5dd8c777c48a2eca4ec115ed16cf186de320556c8be371c17998e9e6f19c30eee3f341f45d8964d57a4c42f3b3ffa24f57622b586a279f1da84443efac47f0908294d01f318a9761924e7ad6301a39b9ba628ed7aaa73ddf8d3fd2e2b6e507b50debb7a505a53a82b0a8b24fae2677a3f3458ea406984f7fee37d06e159d6535cce2bdb3fd9c1bb46377e996ebf21c356d0";
    } else if (market == GM_ETHUSDC_ASSET_ID) {
      // For ETHUSDC, only ETH and USDC are needed
      tokens = new address[](2);
      providers = new address[](2);
      data = new bytes[](2);
      // Long token
      tokens[0] = address(weth);
      // Short token
      tokens[1] = address(usdc);

      providers[0] = gmxV2OracleProvider;
      providers[1] = gmxV2OracleProvider;

      data[
        0
      ] = hex"0006f100c86a0007ed73322d6e26606c9985fd511be9d92cf5af6b3dda8143c7000000000000000000000000000000000000000000000000000000002113a908000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030001000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000362205e10b3a147d02792eccee483dca6c7b44ecce7012cb8c6e0b68b3ae90000000000000000000000000000000000000000000000000000000067402a6e0000000000000000000000000000000000000000000000000000000067402a6e000000000000000000000000000000000000000000000000000056445dca3d3c000000000000000000000000000000000000000000000000004a4b9c66aff1fc0000000000000000000000000000000000000000000000000000000067417bee0000000000000000000000000000000000000000000000b6e35a9c6c9f9900000000000000000000000000000000000000000000000000b6e009cbf33ddc80000000000000000000000000000000000000000000000000b6e5170e3624ffc0000000000000000000000000000000000000000000000000000000000000000006b6cb93baf945c458d500740f1573a6273d00e5f33d2abae11f9c84d742e8a3a68a00ca25fae7c2154a7f2e729e45c9bcb9e3ad8746e623c31086aadf595ee0b908ab52094a2303f7d015b5888d30f4c2422fb0296cbc0043760f57bfdf54ea9aac539bff764c8156229dd75671fc95aceff3b1e96ab61b76886c4668bd573634b7dbdabe40c6bb77f5e070b787adbfaec76cbdd95136bb8f2fe4bc5b7baf10b890976ec4aab4f42b730b757a7b152bc99d84c52be71159c11c837e6b99a5780a000000000000000000000000000000000000000000000000000000000000000612f59f00f5bab40b072fd6eed8d507f65af0855d2e24ff39f3a160e0e7325c2d149538a283ea2d72e756a12d04e88593c82a20d747b895dda3023c746d9fa756682bd07310bd51a145d9909281e75749b6e4c0c0b02d8181d094e44c19e8ac9e6ff2fe7a80a171607a639fcebd1a9e67f316352c53aeae98817275a8c9b2b6a454ccf21ebcbc28a20994fc7dc5d505c9e7a9e5c19f32eab9dbf4889120009f4e25af7a36ba850744237cc778bbdd52371dfd417445079613b0ff3d46d876f193";
      data[
        1
      ] = hex"00064c28ccf99cc505d648ffcbc4c2c613859826fd4552841a6822b51800d9610000000000000000000000000000000000000000000000000000000020530513000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000038f83323b6b08116d1614cf33a9bd71ab5e0abf0c9f1b783a74a43e7bd9920000000000000000000000000000000000000000000000000000000067402a6e0000000000000000000000000000000000000000000000000000000067402a6e000000000000000000000000000000000000000000000000000056446e8c4674000000000000000000000000000000000000000000000000004a4b9c66aff1fc0000000000000000000000000000000000000000000000000000000067417bee0000000000000000000000000000000000000000000000000de0e04bb44672b40000000000000000000000000000000000000000000000000de04077ab91e0000000000000000000000000000000000000000000000000000de10dffbda983dc0000000000000000000000000000000000000000000000000000000000000006368795020a44347bba73b6d4ed97f00412ecc47422750f3393fe11883483ded8d2f0793a09c23be43cd52cec9bd826d66b5b84e9bc7f747af74af234ddec8875a10a1dcdd5f807f13cf6064ea0440d39050bb5221a9515dcb148320dbf9903b9b76e7a1ffc2daab25d65f8399e1f4c2029b2f5af6947ad3cefe562b6607561667b858e025795e4b2226e4c9d077a212b778e4c22946042c34487baef93035a2279124cb74876db50ad2590f5942634f86cf53154618515efcacc166cb54b5c8900000000000000000000000000000000000000000000000000000000000000066f022f89094c89acdf97fc4083a9ca28f7b48069fc2b08b307f77a3b0afe369f11eaa4612e25ba9a51d6381e222f5f875cbf49ae5dea0c9c86178d3c879b360e434db0cf9b446f5d3fa158cb9ff932932987480f0eaac4145ebb1b913d01cba41c0e42404c91e419a69a5104e46e8325bcccc1738f60c40f8acbaa4ac96be0a1607271adf4502596c9e803e3be298696cbcba39438a6fdef101b0bd0059ffb35412851d92d08bfd1dde0dd757251c85dfa6f87ffe8ee6095a8563eed47df2d42";
    }

    gmxV2DepositHandler.executeDeposit(
      depositOrderId,
      IGmxV2Oracle.SetPricesParams({ tokens: tokens, providers: providers, data: data })
    );
  }

  function gmxV2Keeper_executeWithdrawalOrder(bytes32 market, bytes32 withdrawalOrderId) internal {
    address[] memory tokens;
    address[] memory providers;
    bytes[] memory data;

    if (market == GM_WBTCUSDC_ASSET_ID) {
      // For BTCUSDC, we need to set the price for 0x479 as well as wbtc and usdc
      tokens = new address[](3);
      providers = new address[](3);
      data = new bytes[](3);
      // Index token
      tokens[0] = 0x47904963fc8b2340414262125aF798B9655E58Cd;
      // Long token
      tokens[1] = address(wbtc);
      // Short token
      tokens[2] = address(usdc);

      providers[0] = gmxV2OracleProvider;
      providers[1] = gmxV2OracleProvider;
      providers[2] = gmxV2OracleProvider;

      data[
        0
      ] = hex"0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec0000000000000000000000000000000000000000000000000000000023012710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000101000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b8000000000000000000000000000000000000000000000000000000006758ecca000000000000000000000000000000000000000000000000000000006758ecca000000000000000000000000000000000000000000000000000050f4883924980000000000000000000000000000000000000000000000000034b1fb387706e000000000000000000000000000000000000000000000000000000000675a3e4a000000000000000000000000000000000000000000001469c757f15134410000000000000000000000000000000000000000000000001469763db213aab2b000000000000000000000000000000000000000000000001469c77b7843a4020000000000000000000000000000000000000000000000000000000000000000000633e7e8ffce3d240b263510f7d00b372dd04d855d3d99a3f51db59a72901f059f4327abf80455b5bc0faf7f3999937e510e4089f398273997e33cdb3ce51c169c739fcb3f498157d637f81c2e51b89999f4d4ee66050dee975115100621c95927e984149e4ad1199dcd91a0e2098cf3609309c69965f6561a8f6a77127a224d895ff9669d1d7c5a198ede95119272540d3f6219787af3d45f5398386766379a3bc0c177fa4f9800fdfafc86f71b0a9c55975d6e431abf83613a8841600ba9fdf200000000000000000000000000000000000000000000000000000000000000067d3b7eb2d37d74ecf7c6fe65413cf4af7c02512b89c0841438c05279216467686630d77105dad3591e5accd87b6f5e59d2722119273afa63d16a493a076a866511e05ad8d7506164f02ef270d98c163925de1bdaf7a14b4d4460cff64300033716956b8e11b4839e8c2a27b5049f7f5b042de3fbbb1d29f855f28d7d557cfb962ed15f9f46733b9241d467d98455fb9a5aa7ab3ae87ac7f39f8e9dff9afe4f1a0859338266b96264185f8109e98046396f6247350b558b1056fd268715b0565c";
      data[
        1
      ] = hex"0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec0000000000000000000000000000000000000000000000000000000023012710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000101000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b8000000000000000000000000000000000000000000000000000000006758ecca000000000000000000000000000000000000000000000000000000006758ecca000000000000000000000000000000000000000000000000000050f4883924980000000000000000000000000000000000000000000000000034b1fb387706e000000000000000000000000000000000000000000000000000000000675a3e4a000000000000000000000000000000000000000000001469c757f15134410000000000000000000000000000000000000000000000001469763db213aab2b000000000000000000000000000000000000000000000001469c77b7843a4020000000000000000000000000000000000000000000000000000000000000000000633e7e8ffce3d240b263510f7d00b372dd04d855d3d99a3f51db59a72901f059f4327abf80455b5bc0faf7f3999937e510e4089f398273997e33cdb3ce51c169c739fcb3f498157d637f81c2e51b89999f4d4ee66050dee975115100621c95927e984149e4ad1199dcd91a0e2098cf3609309c69965f6561a8f6a77127a224d895ff9669d1d7c5a198ede95119272540d3f6219787af3d45f5398386766379a3bc0c177fa4f9800fdfafc86f71b0a9c55975d6e431abf83613a8841600ba9fdf200000000000000000000000000000000000000000000000000000000000000067d3b7eb2d37d74ecf7c6fe65413cf4af7c02512b89c0841438c05279216467686630d77105dad3591e5accd87b6f5e59d2722119273afa63d16a493a076a866511e05ad8d7506164f02ef270d98c163925de1bdaf7a14b4d4460cff64300033716956b8e11b4839e8c2a27b5049f7f5b042de3fbbb1d29f855f28d7d557cfb962ed15f9f46733b9241d467d98455fb9a5aa7ab3ae87ac7f39f8e9dff9afe4f1a0859338266b96264185f8109e98046396f6247350b558b1056fd268715b0565c";
      data[
        2
      ] = hex"00064c28ccf99cc505d648ffcbc4c2c613859826fd4552841a6822b51800d9610000000000000000000000000000000000000000000000000000000022fffe18000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000038f83323b6b08116d1614cf33a9bd71ab5e0abf0c9f1b783a74a43e7bd992000000000000000000000000000000000000000000000000000000006758ecca000000000000000000000000000000000000000000000000000000006758ecca000000000000000000000000000000000000000000000000000050f4883924980000000000000000000000000000000000000000000000000034b0a3853e190400000000000000000000000000000000000000000000000000000000675a3e4a0000000000000000000000000000000000000000000000000de08021d0b440000000000000000000000000000000000000000000000000000de0375f5d1f40000000000000000000000000000000000000000000000000000de0bd404b01b12000000000000000000000000000000000000000000000000000000000000000062cc3c965bced712e3e2982a542bbf7b272b97a4189502264141a23f935eb5081f78cd440e9bc5325633ecd0c2106a068e8e1a27c42f56a4fc75eeae3db976e7b96ca742b49064adc6945ca4e1d5ed097785eb489b52026f070bd9ae4dfb7fc5633eaf77d3c6748f01fe6f9e60c99456d5b43c8b875ccef459d9f3c62a49a2a082a3782b29c4b05c50fb030fe0f0d564429bdb2d3cbe2e164ae0cd0ea1c05ea176d453d4d1791b531cd0cefbf6b7cd37fead277e08e80f4d1101757a2107872fa00000000000000000000000000000000000000000000000000000000000000062e3911bb8a588d739b5538ef7797913bcc8448984c3e660301c395a230991596266bfefc84c39303ce6e2bdecce94be62da3e95809ce802150c2325b28411ea75eaed7f30355f1941429260fadc68808e928e269dd8cd59110b9873a833880c96a2663fd97fe9f2684745695c78574544ba30eb1456cd02ba0ad17c281c18fed2943d8509e6f836fc0866f7de51c63dae23543b1a0c664d2542f0bcae5d0cb40490603c3e0fc699ed65306d9749392047db72cbf78d61be926a42bd3dd3e1a7d";
    } else if (market == GM_ETHUSDC_ASSET_ID) {
      // For ETHUSDC, only ETH and USDC are needed
      tokens = new address[](2);
      providers = new address[](2);
      data = new bytes[](2);
      // Long token
      tokens[0] = address(weth);
      // Short token
      tokens[1] = address(usdc);

      providers[0] = gmxV2OracleProvider;
      providers[1] = gmxV2OracleProvider;

      data[
        0
      ] = hex"0006f100c86a0007ed73322d6e26606c9985fd511be9d92cf5af6b3dda8143c70000000000000000000000000000000000000000000000000000000023ceda12000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000362205e10b3a147d02792eccee483dca6c7b44ecce7012cb8c6e0b68b3ae900000000000000000000000000000000000000000000000000000000675913ea00000000000000000000000000000000000000000000000000000000675913ea00000000000000000000000000000000000000000000000000004f3dfc665d1c0000000000000000000000000000000000000000000000000032498df53715f000000000000000000000000000000000000000000000000000000000675a656a0000000000000000000000000000000000000000000000c719f42b42c2e519000000000000000000000000000000000000000000000000c7193dc7a404f440000000000000000000000000000000000000000000000000c71a82f108fe84514000000000000000000000000000000000000000000000000000000000000000067f20a7e556158a3c6338e21ddbeec2040ce017bb33553ddb537154fb1ed86b584ecf75c006a121d7d75100c55bf64b96de2281c8002937e373b073b0ee58638adbbda79d0652ff99f422b955bc16df0c0011729f46b9f0bdf89d4af41f75b5332fd01d546d476208a50c4a88277b31bdb4c2ba7442d0cb0d29ad960683795ff1a8bc5b0e2cfced63884d88ad173a6f085241c897c7e2f11e628b4846d76771a4f76e0dde4b453b8b50049437cf26a46a9d758934c9a3c78365ed97046207b97000000000000000000000000000000000000000000000000000000000000000064b1193817617d2a5c4fcd8154309b203c7103ed8fd44e2791efafe584a556d19262cef1e6ec559c594117084eedbd2b2dbcafc030f79e2e0d8857fcd4d1daabd3bad07b2ca762f292433e155295c48f6c42b74366a3c0fb16f2cf3dbfdde8f1b2a24d4dc9117d65ad7e664c278298da542267c74c0b91e1c207cbcb2c7179f6b08892e5511196c5d8584814a7bda311b344345d41d6c4ec4e15740b12a1caf1e0c55a0876d1b658b274c68c3cb223a82701d898689eea00cff439d9d72304fea";
      data[
        1
      ] = hex"00064c28ccf99cc505d648ffcbc4c2c613859826fd4552841a6822b51800d9610000000000000000000000000000000000000000000000000000000023041e05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000038f83323b6b08116d1614cf33a9bd71ab5e0abf0c9f1b783a74a43e7bd99200000000000000000000000000000000000000000000000000000000675913ea00000000000000000000000000000000000000000000000000000000675913ea00000000000000000000000000000000000000000000000000004f3b546334700000000000000000000000000000000000000000000000000032498df53715f000000000000000000000000000000000000000000000000000000000675a656a0000000000000000000000000000000000000000000000000de04a9b997834cc0000000000000000000000000000000000000000000000000de035ef1fa89cec0000000000000000000000000000000000000000000000000de0910b58a986d80000000000000000000000000000000000000000000000000000000000000006dcd3c9d3fa9cb52d65e5c8898d2e0cc444d740304f8c8df04bffa9428401df52b0e801244578ceeb89957dbfc188883330c349997a557b234a93d061bd884f9bde50642bfcfa8d5a5b910d5ec15dcf5ce1935e1e3d81e46f3809eb66a16f4f389a73aa9e90575f1c1fe1694f20db26fbd1271911b5fda4d239b539bc5565af63fc47f9352dc49e455958975f2f3acfc4fdc1ef991ccd91bd61d25523070c8947ff61b69969872ea5c6a6e45b407397ca82097b04ebdad68de3bf533f5742ce1c00000000000000000000000000000000000000000000000000000000000000062ba75c112b0a67c89671b0f144e0b133b8671a6d1d3d63ba48a6e61b8d3c4eee17fb7ed4e894292e9f407de53edd915110fc5df2dcc401648f0a9a418d9bcce72d62fb655969a2a278f2c019789c10f40c232f1fbdcf131df5d5089af019f0e320396905b3571c4df34bc3df6b53ecc179c56a581bcf02422b48d6dbdd957dfb1d6d33bdb446ba90ecd03dfd4859bcaf0466a07d4e72521d63d3bc38a0bc0d3e59acb5d17f1cd9f84f302734bb176b1d1181897d3b8d34177003435393da057a";
    }

    gmxV2WithdrawalHandler.executeWithdrawal(
      withdrawalOrderId,
      IGmxV2Oracle.SetPricesParams({ tokens: tokens, providers: providers, data: data })
    );
  }
}
