// Generated by @wagmi/cli@0.1.14 on 10/2/2023 at 5:38:10 PM

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ConfigStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const configStorageABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IConfigStorage_BadArgs" },
  { type: "error", inputs: [], name: "IConfigStorage_BadLen" },
  { type: "error", inputs: [], name: "IConfigStorage_ExceedLimitSetting" },
  { type: "error", inputs: [], name: "IConfigStorage_InvalidAddress" },
  { type: "error", inputs: [], name: "IConfigStorage_InvalidAssetClass" },
  { type: "error", inputs: [], name: "IConfigStorage_InvalidValue" },
  { type: "error", inputs: [], name: "IConfigStorage_MaxDurationForMinProfit" },
  { type: "error", inputs: [], name: "IConfigStorage_MaxFeeBps" },
  { type: "error", inputs: [], name: "IConfigStorage_NotAcceptedCollateral" },
  { type: "error", inputs: [], name: "IConfigStorage_NotAcceptedLiquidity" },
  { type: "error", inputs: [], name: "IConfigStorage_NotWhiteListed" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogAddAssetClassConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: "LogAddMarketConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_token", internalType: "address", type: "address", indexed: false },
      {
        name: "_config",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogAddOrUpdateHLPTokenConfigs",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false }],
    name: "LogDelistMarket",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: true },
      { name: "minProfitDuration", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogMinProfitDuration",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "token", internalType: "address", type: "address", indexed: false }],
    name: "LogRemoveUnderlying",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogSetAssetClassConfigByIndex",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetAssetConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldCalculator", internalType: "address", type: "address", indexed: true },
      { name: "newCalculator", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetCalculator",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetCollateralTokenConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executorAddress", internalType: "address", type: "address", indexed: true },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetConfigExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "enabled", internalType: "bool", type: "bool", indexed: false }],
    name: "LogSetDynamicEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldHlp", internalType: "address", type: "address", indexed: true },
      { name: "newHlp", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetHLP",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "address", type: "address", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetHlpTokenConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogSetLiquidationConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldLiquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "hlpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "hlpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxHLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
        indexed: true,
      },
      {
        name: "newLiquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "hlpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "hlpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxHLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetLiquidityConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "bool", type: "bool", indexed: false },
      { name: "newValue", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetLiquidityEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: "LogSetMarketConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinimumPositionSize",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldOracle", internalType: "address", type: "address", indexed: true },
      { name: "newOracle", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetOracle",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPnlFactorBPS", internalType: "uint32", type: "uint32", indexed: false },
      { name: "newPnlFactorBPS", internalType: "uint32", type: "uint32", indexed: false },
    ],
    name: "LogSetPnlFactor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "contractAddress", internalType: "address", type: "address", indexed: true },
      { name: "executorAddress", internalType: "address", type: "address", indexed: false },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetServiceExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetSwapConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "prevRouter", internalType: "address", type: "address", indexed: false },
      { name: "newRouter", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetSwitchCollateralRouter",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldToken", internalType: "address", type: "address", indexed: true },
      { name: "newToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetToken",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldHooks", internalType: "address[]", type: "address[]", indexed: false },
      { name: "newHooks", internalType: "address[]", type: "address[]", indexed: false },
    ],
    name: "LogSetTradeServiceHooks",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetTradingConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BPS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_FEE_BPS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "addAssetClassConfig",
    outputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    name: "addMarketConfig",
    outputs: [{ name: "_newMarketIndex", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokens", internalType: "address[]", type: "address[]" },
      {
        name: "_configs",
        internalType: "struct IConfigStorage.HLPTokenConfig[]",
        type: "tuple[]",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "addOrUpdateAcceptedToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "allowedLiquidators",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "assetClassConfigs",
    outputs: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetCollateralTokenConfigs",
    outputs: [
      { name: "settleStrategy", internalType: "address", type: "address" },
      { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
      { name: "accepted", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetConfigs",
    outputs: [
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "assetId", internalType: "bytes32", type: "bytes32" },
      { name: "decimals", internalType: "uint8", type: "uint8" },
      { name: "isStableCoin", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetHlpTokenConfigs",
    outputs: [
      { name: "targetWeight", internalType: "uint256", type: "uint256" },
      { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
      { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
      { name: "accepted", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "calculator",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "collateralAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "configExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_marketIndex", internalType: "uint256", type: "uint256" }],
    name: "delistMarket",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
    name: "getAssetClassConfigByIndex",
    outputs: [
      {
        name: "_assetClassConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getAssetClassConfigsLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetId", internalType: "bytes32", type: "bytes32" }],
    name: "getAssetConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetConfigByToken",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetId", internalType: "bytes32", type: "bytes32" }],
    name: "getAssetHlpTokenConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetHlpTokenConfigByToken",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetTokenDecimal",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getCollateralTokenConfigs",
    outputs: [
      {
        name: "_collateralTokenConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCollateralTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getHlpAssetIds",
    outputs: [{ name: "", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getHlpTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidationConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidityConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "hlpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "hlpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxHLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
    name: "getMarketConfigByIndex",
    outputs: [
      {
        name: "_marketConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getMarketConfigs",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.MarketConfig[]",
        type: "tuple[]",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getMarketConfigsLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getTradeServiceHooks",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getTradingConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "hlp",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "hlpAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "initialize", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidationConfig",
    outputs: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidityConfig",
    outputs: [
      { name: "hlpTotalTokenWeight", internalType: "uint256", type: "uint256" },
      { name: "hlpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
      { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "maxHLPUtilizationBPS", internalType: "uint32", type: "uint32" },
      { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
      { name: "enabled", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "marketConfigs",
    outputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32" },
      { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
      { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
      { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
      { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
      { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
      { name: "assetClass", internalType: "uint8", type: "uint8" },
      { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
      { name: "active", internalType: "bool", type: "bool" },
      {
        name: "fundingRate",
        internalType: "struct IConfigStorage.FundingRate",
        type: "tuple",
        components: [
          { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
          { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "marketIndex", internalType: "uint256", type: "uint256" }],
    name: "minProfitDurations",
    outputs: [{ name: "minProfitDuration", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minimumPositionSize",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "oracle",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pnlFactorBPS",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "removeAcceptedToken",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_index", internalType: "uint256", type: "uint256" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "setAssetClassConfigByIndex",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setAssetConfig",
    outputs: [
      {
        name: "_assetConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetIds", internalType: "bytes32[]", type: "bytes32[]" },
      {
        name: "_newConfigs",
        internalType: "struct IConfigStorage.AssetConfig[]",
        type: "tuple[]",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setAssetConfigs",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_calculator", internalType: "address", type: "address" }],
    name: "setCalculator",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setCollateralTokenConfig",
    outputs: [
      {
        name: "_collateralTokenConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetIds", internalType: "bytes32[]", type: "bytes32[]" },
      {
        name: "_newConfigs",
        internalType: "struct IConfigStorage.CollateralTokenConfig[]",
        type: "tuple[]",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setCollateralTokenConfigs",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setConfigExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_enabled", internalType: "bool", type: "bool" }],
    name: "setDynamicEnabled",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_hlp", internalType: "address", type: "address" }],
    name: "setHLP",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setHlpTokenConfig",
    outputs: [
      {
        name: "_hlpTokenConfig",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "setLiquidationConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_liquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "hlpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "hlpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxHLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setLiquidityConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_enabled", internalType: "bool", type: "bool" }],
    name: "setLiquidityEnabled",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    name: "setMarketConfig",
    outputs: [
      {
        name: "_marketConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndexs", internalType: "uint256[]", type: "uint256[]" },
      { name: "_minProfitDurations", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "setMinProfitDurations",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_minimumPositionSize", internalType: "uint256", type: "uint256" }],
    name: "setMinimumPositionSize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_oracle", internalType: "address", type: "address" }],
    name: "setOracle",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pnlFactorBPS", internalType: "uint32", type: "uint32" }],
    name: "setPnlFactor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_sglp", internalType: "address", type: "address" }],
    name: "setSGlp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contractAddress", internalType: "address", type: "address" },
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contractAddresses", internalType: "address[]", type: "address[]" },
      { name: "_executorAddresses", internalType: "address[]", type: "address[]" },
      { name: "_isServiceExecutors", internalType: "bool[]", type: "bool[]" },
    ],
    name: "setServiceExecutors",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
      },
    ],
    name: "setSwapConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newSwitchCollateralRouter", internalType: "address", type: "address" }],
    name: "setSwitchCollateralRouter",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newHooks", internalType: "address[]", type: "address[]" }],
    name: "setTradeServiceHooks",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "setTradingConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_weth", internalType: "address", type: "address" }],
    name: "setWeth",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "sglp",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "swapConfig",
    outputs: [
      { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "switchCollateralRouter",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "tokenAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "tradeServiceHooks",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradingConfig",
    outputs: [
      { name: "fundingInterval", internalType: "uint256", type: "uint256" },
      { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
      { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "maxPosition", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "treasury",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "validateAcceptedCollateral",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "validateAcceptedLiquidityToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_contractAddress", internalType: "address", type: "address" },
      { name: "_executorAddress", internalType: "address", type: "address" },
    ],
    name: "validateServiceExecutor",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "weth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CrossMarginHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const crossMarginHandlerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "HMXLib_WrongSubAccountId" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_BadAmount" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_InCorrectValueTransfer" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_InsufficientExecutionFee" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_MismatchMsgValue" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NoOrder" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NotExecutionState" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NotOrderOwner" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NotWNativeToken" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NotWhitelisted" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_SelfTransfer" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_Unauthorized" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shouldUnwrap", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogCancelWithdrawOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shouldUnwrap", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogCreateWithdrawOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "primaryAccount", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogDepositCollateral",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shouldUnwrap", internalType: "bool", type: "bool", indexed: false },
      { name: "isSuccess", internalType: "bool", type: "bool", indexed: false },
      { name: "errMsg", internalType: "string", type: "string", indexed: false },
    ],
    name: "LogExecuteWithdrawOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogMaxExecutionChuck",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldCrossMarginService", internalType: "address", type: "address", indexed: true },
      { name: "newCrossMarginService", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetCrossMarginService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinExecutionFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executor", internalType: "address", type: "address", indexed: false },
      { name: "isAllow", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetOrderExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPyth", internalType: "address", type: "address", indexed: true },
      { name: "newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "primaryAccount", internalType: "address", type: "address", indexed: true },
      { name: "subAccountFrom", internalType: "uint256", type: "uint256", indexed: true },
      { name: "subAccountTo", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogTransferCollateralSubAccount",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "primaryAccount", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogWithdrawCollateral",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_orderIndex", internalType: "uint256", type: "uint256" }],
    name: "cancelWithdrawOrder",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_shouldUnwrap", internalType: "bool", type: "bool" },
    ],
    name: "createWithdrawCollateralOrder",
    outputs: [{ name: "_orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "crossMarginService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_shouldWrap", internalType: "bool", type: "bool" },
    ],
    name: "depositCollateral",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_endIndex", internalType: "uint256", type: "uint256" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "executeOrder",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_order",
        internalType: "struct ICrossMarginHandler.WithdrawOrder",
        type: "tuple",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "executeWithdrawOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActiveWithdrawOrders",
    outputs: [
      {
        name: "_withdrawOrder",
        internalType: "struct ICrossMarginHandler.WithdrawOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getExecutedWithdrawOrders",
    outputs: [
      {
        name: "_withdrawOrder",
        internalType: "struct ICrossMarginHandler.WithdrawOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getWithdrawOrderLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getWithdrawOrders",
    outputs: [
      {
        name: "_withdrawOrders",
        internalType: "struct ICrossMarginHandler.WithdrawOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_crossMarginService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
      { name: "_minExecutionOrderFee", internalType: "uint256", type: "uint256" },
      { name: "_maxExecutionChuck", internalType: "uint256", type: "uint256" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "maxExecutionChuck",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionOrderFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextExecutionOrderIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "orderExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_crossMarginService", internalType: "address", type: "address" }],
    name: "setCrossMarginService",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_maxExecutionChuck", internalType: "uint256", type: "uint256" }],
    name: "setMaxExecutionChuck",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionFee", internalType: "uint256", type: "uint256" }],
    name: "setMinExecutionFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executor", internalType: "address", type: "address" },
      { name: "_isAllow", internalType: "bool", type: "bool" },
    ],
    name: "setOrderExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "subAccountExecutedWithdrawOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "token", internalType: "address", type: "address" },
      { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
      { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
      { name: "shouldUnwrap", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "withdrawOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "token", internalType: "address", type: "address" },
      { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
      { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
      { name: "shouldUnwrap", internalType: "bool", type: "bool" },
    ],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGmxGlpManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGmxGlpManagerABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_fundingAccount", internalType: "address", type: "address" },
      { name: "_account", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minUsdg", internalType: "uint256", type: "uint256" },
      { name: "_minGlp", internalType: "uint256", type: "uint256" },
    ],
    name: "addLiquidityForAccount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "useMaxPrice", internalType: "bool", type: "bool" }],
    name: "getAum",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "useMaxPrice", internalType: "bool", type: "bool" }],
    name: "getAumInUsdg",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getAums",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "useMaxPrice", internalType: "bool", type: "bool" }],
    name: "getPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LimitTradeHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const limitTradeHandlerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "HMXLib_WrongSubAccountId" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_BadCalldata" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_BadSizeDelta" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_BadSubAccountId" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_IncorrectValueTransfer" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InsufficientExecutionFee" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidArraySize" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidPriceForExecution" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidSender" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_LimitOrderConvertToMarketOrder" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MarketIsClosed" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MarketOrderNoUpdate" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MaxExecutionFee" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MaxPositionSize" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MaxTradeSize" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_NonExistentOrder" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_NotExecutionState" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_NotWhitelisted" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_PriceSlippage" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_TriggerPriceAboveCurrentPrice" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_TriggerPriceBelowCurrentPrice" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_Unauthorized" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_UnknownOrderType" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_WrongSizeDelta" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogCancelLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "acceptablePrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogCreateLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogExecuteLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
      { name: "errMsg", internalType: "bytes", type: "bytes", indexed: false },
    ],
    name: "LogExecuteLimitOrderFail",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
      { name: "errMsg", internalType: "bytes", type: "bytes", indexed: false },
    ],
    name: "LogExecuteMarketOrderFail",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "sender", internalType: "address", type: "address", indexed: false },
      { name: "delegate", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetDelegate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "isActive", internalType: "bool", type: "bool", indexed: false }],
    name: "LogSetGuaranteeLimitPrice",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "bool", type: "bool", indexed: false },
      { name: "newValue", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetIsAllowAllExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint64", type: "uint64", indexed: false },
      { name: "newValue", internalType: "uint64", type: "uint64", indexed: false },
    ],
    name: "LogSetMinExecutionFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint32", type: "uint32", indexed: false },
      { name: "newValue", internalType: "uint32", type: "uint32", indexed: false },
    ],
    name: "LogSetMinExecutionTimestamp",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executor", internalType: "address", type: "address", indexed: false },
      { name: "isAllow", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetOrderExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetTradeService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogUpdateLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "activeLimitOrdersCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "activeMarketOrdersCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "activeOrdersCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_mainAccount", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_cmds", internalType: "enum ILimitTradeHandler.Command[]", type: "uint8[]" },
      { name: "_datas", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "batch",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_mainAccount", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_orderIndex", internalType: "uint256", type: "uint256" },
    ],
    name: "cancelOrder",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_mainAccount", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "_acceptablePrice", internalType: "uint256", type: "uint256" },
      { name: "_triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_reduceOnly", internalType: "bool", type: "bool" },
      { name: "_tpToken", internalType: "address", type: "address" },
    ],
    name: "createOrder",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "_acceptablePrice", internalType: "uint256", type: "uint256" },
      { name: "_triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_reduceOnly", internalType: "bool", type: "bool" },
      { name: "_tpToken", internalType: "address", type: "address" },
    ],
    name: "createOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "delegations",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "vars",
        internalType: "struct LimitTradeHandler.ExecuteOrderVars",
        type: "tuple",
        components: [
          {
            name: "order",
            internalType: "struct ILimitTradeHandler.LimitOrder",
            type: "tuple",
            components: [
              { name: "account", internalType: "address", type: "address" },
              { name: "tpToken", internalType: "address", type: "address" },
              { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
              { name: "reduceOnly", internalType: "bool", type: "bool" },
              { name: "sizeDelta", internalType: "int256", type: "int256" },
              { name: "subAccountId", internalType: "uint8", type: "uint8" },
              { name: "orderIndex", internalType: "uint256", type: "uint256" },
              { name: "marketIndex", internalType: "uint256", type: "uint256" },
              { name: "triggerPrice", internalType: "uint256", type: "uint256" },
              { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
              { name: "executionFee", internalType: "uint256", type: "uint256" },
              { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "subAccount", internalType: "address", type: "address" },
          { name: "positionId", internalType: "bytes32", type: "bytes32" },
          { name: "encodedVaas", internalType: "bytes32", type: "bytes32" },
          { name: "priceData", internalType: "bytes32[]", type: "bytes32[]" },
          { name: "publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
          { name: "feeReceiver", internalType: "address payable", type: "address" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "minPublishTime", internalType: "uint256", type: "uint256" },
          { name: "positionIsLong", internalType: "bool", type: "bool" },
          { name: "isNewPosition", internalType: "bool", type: "bool" },
          { name: "isMarketOrder", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
        ],
      },
    ],
    name: "executeLimitOrder",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_accounts", internalType: "address[]", type: "address[]" },
      { name: "_subAccountIds", internalType: "uint8[]", type: "uint8[]" },
      { name: "_orderIndexes", internalType: "uint256[]", type: "uint256[]" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
      { name: "_isRevert", internalType: "bool", type: "bool" },
    ],
    name: "executeOrders",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_accounts", internalType: "address[]", type: "address[]" },
      { name: "_subAccountIds", internalType: "uint8[]", type: "uint8[]" },
      { name: "_orderIndexes", internalType: "uint256[]", type: "uint256[]" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "executeOrders",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getAllActiveOrders",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getAllActiveOrdersBySubAccount",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getLimitActiveOrders",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getLimitActiveOrdersBySubAccount",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getMarketActiveOrders",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getMarketActiveOrdersBySubAccount",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_weth", internalType: "address", type: "address" },
      { name: "_tradeService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
      { name: "_minExecutionFee", internalType: "uint64", type: "uint64" },
      { name: "_minExecutionTimestamp", internalType: "uint32", type: "uint32" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isAllowAllExecutor",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isGuaranteeLimitPrice",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "limitOrders",
    outputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "tpToken", internalType: "address", type: "address" },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "reduceOnly", internalType: "bool", type: "bool" },
      { name: "sizeDelta", internalType: "int256", type: "int256" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
      { name: "orderIndex", internalType: "uint256", type: "uint256" },
      { name: "marketIndex", internalType: "uint256", type: "uint256" },
      { name: "triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "limitOrdersIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "limitTradeHelper",
    outputs: [{ name: "", internalType: "contract LimitTradeHelper", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionFee",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionTimestamp",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
    name: "multicall",
    outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "orderExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "contract IEcoPyth", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_delegate", internalType: "address", type: "address" }],
    name: "setDelegate",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "isActive", internalType: "bool", type: "bool" }],
    name: "setGuaranteeLimitPrice",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_limitTradeHelper", internalType: "address", type: "address" }],
    name: "setLimitTradeHelper",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionFee", internalType: "uint64", type: "uint64" }],
    name: "setMinExecutionFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionTimestamp", internalType: "uint32", type: "uint32" }],
    name: "setMinExecutionTimestamp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executor", internalType: "address", type: "address" },
      { name: "_isAllow", internalType: "bool", type: "bool" },
    ],
    name: "setOrderExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_tradeService", internalType: "address", type: "address" }],
    name: "setTradeService",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradeService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_mainAccount", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_orderIndex", internalType: "uint256", type: "uint256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "_acceptablePrice", internalType: "uint256", type: "uint256" },
      { name: "_triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "_reduceOnly", internalType: "bool", type: "bool" },
      { name: "_tpToken", internalType: "address", type: "address" },
    ],
    name: "updateOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "weth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LiquidityHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const liquidityHandlerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "ILiquidityHandler_InCorrectValueTransfer" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InsufficientExecutionFee" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InsufficientRefund" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InvalidSender" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NoOrder" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotExecutionState" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotOrderOwner" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotWNativeToken" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotWhitelisted" },
  { type: "error", inputs: [], name: "ILiquidityHandler_Unauthorized" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isAdd", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogCancelLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "tokenIn", internalType: "address", type: "address", indexed: true },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48", indexed: false },
    ],
    name: "LogCreateAddLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "tokenOut", internalType: "address", type: "address", indexed: true },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isNativeOut", internalType: "bool", type: "bool", indexed: false },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48", indexed: false },
    ],
    name: "LogCreateRemoveLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isAdd", internalType: "bool", type: "bool", indexed: false },
      { name: "actualOut", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogExecuteLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isNativeOut", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogRefund",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldHlpStaking", internalType: "address", type: "address", indexed: false },
      { name: "newHlpStaking", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetHlpStaking",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetLiquidityService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMaxExecutionChunk",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinExecutionFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executor", internalType: "address", type: "address", indexed: false },
      { name: "isAllow", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetOrderExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPyth", internalType: "address", type: "address", indexed: false },
      { name: "newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "accountExecutedLiquidityOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "minOut", internalType: "uint256", type: "uint256" },
      { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "token", internalType: "address", type: "address" },
      { name: "isAdd", internalType: "bool", type: "bool" },
      { name: "isNativeOut", internalType: "bool", type: "bool" },
      { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_orderIndex", internalType: "uint256", type: "uint256" }],
    name: "cancelLiquidityOrder",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_tokenIn", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_minOut", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_shouldWrap", internalType: "bool", type: "bool" },
    ],
    name: "createAddLiquidityOrder",
    outputs: [{ name: "_orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_tokenIn", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_minOut", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_shouldWrap", internalType: "bool", type: "bool" },
      { name: "_isSurge", internalType: "bool", type: "bool" },
    ],
    name: "createAddLiquidityOrder",
    outputs: [{ name: "_orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_tokenOut", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_minOut", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_isNativeOut", internalType: "bool", type: "bool" },
    ],
    name: "createRemoveLiquidityOrder",
    outputs: [{ name: "_orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_order",
        internalType: "struct ILiquidityHandler.LiquidityOrder",
        type: "tuple",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
        ],
      },
    ],
    name: "executeLiquidity",
    outputs: [{ name: "_amountOut", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_endIndex", internalType: "uint256", type: "uint256" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "executeOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActiveLiquidityOrders",
    outputs: [
      {
        name: "_liquidityOrders",
        internalType: "struct ILiquidityHandler.LiquidityOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getExecutedLiquidityOrders",
    outputs: [
      {
        name: "_liquidityOrders",
        internalType: "struct ILiquidityHandler.LiquidityOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidityOrderLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidityOrders",
    outputs: [
      {
        name: "_liquidityOrders",
        internalType: "struct ILiquidityHandler.LiquidityOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "hlpStaking",
    outputs: [{ name: "", internalType: "contract ISurgeStaking", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_liquidityService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
      { name: "_minExecutionOrderFee", internalType: "uint256", type: "uint256" },
      { name: "_maxExecutionChunk", internalType: "uint256", type: "uint256" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "liquidityOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "minOut", internalType: "uint256", type: "uint256" },
      { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "token", internalType: "address", type: "address" },
      { name: "isAdd", internalType: "bool", type: "bool" },
      { name: "isNativeOut", internalType: "bool", type: "bool" },
      { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidityService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "maxExecutionChunk",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionOrderFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextExecutionOrderIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "orderExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_hlpStaking", internalType: "address", type: "address" }],
    name: "setHlpStaking",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newLiquidityService", internalType: "address", type: "address" }],
    name: "setLiquidityService",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_maxExecutionChunk", internalType: "uint256", type: "uint256" }],
    name: "setMaxExecutionChunk",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionFee", internalType: "uint256", type: "uint256" }],
    name: "setMinExecutionFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executor", internalType: "address", type: "address" },
      { name: "_isAllow", internalType: "bool", type: "bool" },
    ],
    name: "setOrderExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OracleMiddleware
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const oracleMiddlewareABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IOracleMiddleware_InvalidMarketStatus" },
  { type: "error", inputs: [], name: "IOracleMiddleware_InvalidValue" },
  { type: "error", inputs: [], name: "IOracleMiddleware_MarketStatusUndefined" },
  { type: "error", inputs: [], name: "IOracleMiddleware_OnlyUpdater" },
  { type: "error", inputs: [], name: "IOracleMiddleware_PriceStale" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPythAdapter", internalType: "address", type: "address", indexed: false },
      { name: "newPythAdapter", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetAdapter",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "_oldConfidenceThresholdE6", internalType: "uint32", type: "uint32", indexed: false },
      { name: "_newConfidenceThresholdE6", internalType: "uint32", type: "uint32", indexed: false },
      { name: "_oldTrustPriceAge", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_newTrustPriceAge", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_oldAdapter", internalType: "address", type: "address", indexed: false },
      { name: "_newAdapter", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetAssetPriceConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "_status", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "LogSetMarketStatus",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMaxTrustPriceAge",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_account", internalType: "address", type: "address", indexed: true },
      { name: "_isActive", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetUpdater",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetPriceConfigs",
    outputs: [
      { name: "trustPriceAge", internalType: "uint32", type: "uint32" },
      { name: "confidenceThresholdE6", internalType: "uint32", type: "uint32" },
      { name: "adapter", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "getLatestAdaptivePrice",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "getLatestAdaptivePriceWithMarketStatus",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "getLatestPrice",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "getLatestPriceWithMarketStatus",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_maxTrustPriceAge", internalType: "uint256", type: "uint256" }],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "isUpdater",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "marketStatus",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_confidenceThresholdE6", internalType: "uint32", type: "uint32" },
      { name: "_trustPriceAge", internalType: "uint32", type: "uint32" },
      { name: "_adapter", internalType: "address", type: "address" },
    ],
    name: "setAssetPriceConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetIds", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_confidenceThresholdE6s", internalType: "uint32[]", type: "uint32[]" },
      { name: "_trustPriceAges", internalType: "uint32[]", type: "uint32[]" },
      { name: "_adapters", internalType: "address[]", type: "address[]" },
    ],
    name: "setAssetPriceConfigs",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
    name: "setMarketStatus",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_maxTrustPriceAge", internalType: "uint256", type: "uint256" }],
    name: "setMaxTrustPriceAge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetIds", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_statuses", internalType: "uint8[]", type: "uint8[]" },
    ],
    name: "setMultipleMarketStatus",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_isActive", internalType: "bool", type: "bool" },
    ],
    name: "setUpdater",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "unsafeGetLatestAdaptivePrice",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "unsafeGetLatestAdaptivePriceWithMarketStatus",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "unsafeGetLatestPrice",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "unsafeGetLatestPriceWithMarketStatus",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PerpStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpStorageABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IPerpStorage_BadLen" },
  { type: "error", inputs: [], name: "IPerpStorage_NotWhiteListed" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executorAddress", internalType: "address", type: "address", indexed: true },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetServiceExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "assetClasses",
    outputs: [
      { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
      { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
      { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
      { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
      { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_isLong", internalType: "bool", type: "bool" },
      { name: "_size", internalType: "uint256", type: "uint256" },
    ],
    name: "decreasePositionSize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetClassIndex", internalType: "uint8", type: "uint8" },
      { name: "_reserve", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseReserved",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActivePositionIds",
    outputs: [{ name: "_ids", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActivePositions",
    outputs: [
      {
        name: "_positions",
        internalType: "struct IPerpStorage.Position[]",
        type: "tuple[]",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "lastFundingAccrued", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActiveSubAccounts",
    outputs: [{ name: "_subAccounts", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetClassIndex", internalType: "uint256", type: "uint256" }],
    name: "getAssetClassByIndex",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.AssetClass",
        type: "tuple",
        components: [
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
          { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getGlobalState",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.GlobalState",
        type: "tuple",
        components: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_marketIndex", internalType: "uint256", type: "uint256" }],
    name: "getMarketByIndex",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.Market",
        type: "tuple",
        components: [
          { name: "longPositionSize", internalType: "uint256", type: "uint256" },
          { name: "longAccumSE", internalType: "uint256", type: "uint256" },
          { name: "longAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "shortAccumSE", internalType: "uint256", type: "uint256" },
          { name: "shortAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "currentFundingRate", internalType: "int256", type: "int256" },
          { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
          { name: "accumFundingLong", internalType: "int256", type: "int256" },
          { name: "accumFundingShort", internalType: "int256", type: "int256" },
          { name: "fundingAccrued", internalType: "int256", type: "int256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getNumberOfSubAccountPosition",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_positionId", internalType: "bytes32", type: "bytes32" }],
    name: "getPositionById",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.Position",
        type: "tuple",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "lastFundingAccrued", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getPositionBySubAccount",
    outputs: [
      {
        name: "_subAccountPositions",
        internalType: "struct IPerpStorage.Position[]",
        type: "tuple[]",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "lastFundingAccrued", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getPositionIds",
    outputs: [{ name: "_positionIds", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalState",
    outputs: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_isLong", internalType: "bool", type: "bool" },
      { name: "_size", internalType: "uint256", type: "uint256" },
    ],
    name: "increasePositionSize",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "initialize", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "markets",
    outputs: [
      { name: "longPositionSize", internalType: "uint256", type: "uint256" },
      { name: "longAccumSE", internalType: "uint256", type: "uint256" },
      { name: "longAccumS2E", internalType: "uint256", type: "uint256" },
      { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
      { name: "shortAccumSE", internalType: "uint256", type: "uint256" },
      { name: "shortAccumS2E", internalType: "uint256", type: "uint256" },
      { name: "currentFundingRate", internalType: "int256", type: "int256" },
      { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
      { name: "accumFundingLong", internalType: "int256", type: "int256" },
      { name: "accumFundingShort", internalType: "int256", type: "int256" },
      { name: "fundingAccrued", internalType: "int256", type: "int256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "positions",
    outputs: [
      { name: "primaryAccount", internalType: "address", type: "address" },
      { name: "marketIndex", internalType: "uint256", type: "uint256" },
      { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
      { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
      { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
      { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
      { name: "positionSizeE30", internalType: "int256", type: "int256" },
      { name: "realizedPnl", internalType: "int256", type: "int256" },
      { name: "lastFundingAccrued", internalType: "int256", type: "int256" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_positionId", internalType: "bytes32", type: "bytes32" },
    ],
    name: "removePositionFromSubAccount",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_positionId", internalType: "bytes32", type: "bytes32" },
      {
        name: "position",
        internalType: "struct IPerpStorage.Position",
        type: "tuple",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "lastFundingAccrued", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "savePosition",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddresses", internalType: "address[]", type: "address[]" },
      { name: "_isServiceExecutors", internalType: "bool[]", type: "bool[]" },
    ],
    name: "setServiceExecutorBatch",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutors",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "subAccountBorrowingFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "subAccountPositionIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetClassIndex", internalType: "uint8", type: "uint8" },
      {
        name: "_newAssetClass",
        internalType: "struct IPerpStorage.AssetClass",
        type: "tuple",
        components: [
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
          { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "updateAssetClass",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_newPositionSize", internalType: "uint256", type: "uint256" },
      { name: "_newAccumSE", internalType: "uint256", type: "uint256" },
      { name: "_newAccumS2E", internalType: "uint256", type: "uint256" },
    ],
    name: "updateGlobalLongMarketById",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_newPositionSize", internalType: "uint256", type: "uint256" },
      { name: "_newAccumSE", internalType: "uint256", type: "uint256" },
      { name: "_newAccumS2E", internalType: "uint256", type: "uint256" },
    ],
    name: "updateGlobalShortMarketById",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newGlobalState",
        internalType: "struct IPerpStorage.GlobalState",
        type: "tuple",
        components: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "updateGlobalState",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      {
        name: "_market",
        internalType: "struct IPerpStorage.Market",
        type: "tuple",
        components: [
          { name: "longPositionSize", internalType: "uint256", type: "uint256" },
          { name: "longAccumSE", internalType: "uint256", type: "uint256" },
          { name: "longAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "shortAccumSE", internalType: "uint256", type: "uint256" },
          { name: "shortAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "currentFundingRate", internalType: "int256", type: "int256" },
          { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
          { name: "accumFundingLong", internalType: "int256", type: "int256" },
          { name: "accumFundingShort", internalType: "int256", type: "int256" },
          { name: "fundingAccrued", internalType: "int256", type: "int256" },
        ],
      },
    ],
    name: "updateMarket",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VaultStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vaultStorageABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IVaultStorage_BadLen" },
  { type: "error", inputs: [], name: "IVaultStorage_Forbidden" },
  { type: "error", inputs: [], name: "IVaultStorage_HLPBalanceRemaining" },
  { type: "error", inputs: [], name: "IVaultStorage_InvalidAddress" },
  { type: "error", inputs: [], name: "IVaultStorage_NotWhiteListed" },
  { type: "error", inputs: [], name: "IVaultStorage_TargetNotContract" },
  { type: "error", inputs: [], name: "IVaultStorage_TraderBalanceRemaining" },
  { type: "error", inputs: [], name: "IVaultStorage_TraderTokenAlreadyExists" },
  { type: "error", inputs: [], name: "IVaultStorage_ZeroAddress" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "devFeeAmount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogAddDevFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executorAddress", internalType: "address", type: "address", indexed: true },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetServiceExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "strategy", internalType: "address", type: "address", indexed: false },
      { name: "prevTarget", internalType: "address", type: "address", indexed: false },
      { name: "newTarget", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetStrategyAllowance",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "strategy", internalType: "address", type: "address", indexed: false },
      { name: "prevFunctionSig", internalType: "bytes4", type: "bytes4", indexed: false },
      { name: "newFunctionSig", internalType: "bytes4", type: "bytes4", indexed: false },
    ],
    name: "LogSetStrategyFunctionSigAllowance",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "balance", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetTraderBalance",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_borrowingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addBorrowingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addDevFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addFundingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_fundingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addFundingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addHLPLiquidity",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_value", internalType: "uint256", type: "uint256" }],
    name: "addHlpLiquidityDebtUSDE30",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_lossDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addLossDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_tradingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addTradingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_fundingFeeValue", internalType: "uint256", type: "uint256" },
    ],
    name: "borrowFundingFeeFromHlpToTrader",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "borrowingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_convertToken", internalType: "address", type: "address" },
      { name: "_targetToken", internalType: "address", type: "address" },
      { name: "_convertAmount", internalType: "uint256", type: "uint256" },
      { name: "_targetAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "convertFundingFeeReserveWithHLP",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_target", internalType: "address", type: "address" },
      { name: "_callData", internalType: "bytes", type: "bytes" },
    ],
    name: "cook",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseTraderBalance",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "devFees",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "fundingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "fundingFeeReserve",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getTraderTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalBorrowingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalFundingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalLossDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalTradingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "hlpLiquidity",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "hlpLiquidityDebtUSDE30",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseTraderBalance",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "initialize", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "lossDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_devFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_hlpFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payBorrowingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromFundingFeeReserveToTrader",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromHlpToTrader",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromTraderToFundingFeeReserve",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromTraderToHlp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "payHlp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_totalProfitAmount", internalType: "uint256", type: "uint256" },
      { name: "_settlementFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payTraderProfit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_devFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_protocolFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payTradingFee",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "protocolFees",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "pullToken",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "pushToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "removeFundingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "removeHLPLiquidity",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_value", internalType: "uint256", type: "uint256" }],
    name: "removeHlpLiquidityDebtUSDE30",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_fundingFeeValue", internalType: "uint256", type: "uint256" },
    ],
    name: "repayFundingFeeDebtFromTraderToHlp",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddresses", internalType: "address[]", type: "address[]" },
      { name: "_isServiceExecutors", internalType: "bool[]", type: "bool[]" },
    ],
    name: "setServiceExecutorBatch",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutors",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_strategy", internalType: "address", type: "address" },
      { name: "_target", internalType: "address", type: "address" },
    ],
    name: "setStrategyAllowance",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_strategy", internalType: "address", type: "address" },
      { name: "_target", internalType: "bytes4", type: "bytes4" },
    ],
    name: "setStrategyFunctionSigAllowance",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "strategyAllowances",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "strategy", internalType: "address", type: "address" },
    ],
    name: "strategyFunctionSigAllowances",
    outputs: [{ name: "functionSig", internalType: "bytes4", type: "bytes4" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_borrowingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subBorrowingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_fundingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subFundingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_lossDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subLossDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_tradingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subTradingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "totalAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "traderBalances",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "traderTokens",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "tradingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
    ],
    name: "validateAddTraderToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
    ],
    name: "validateRemoveTraderToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_receiver", internalType: "address", type: "address" },
    ],
    name: "withdrawDevFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_receiver", internalType: "address", type: "address" },
    ],
    name: "withdrawFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "withdrawSurplusFromFundingFeeReserveToHLP",
    outputs: [],
  },
] as const
